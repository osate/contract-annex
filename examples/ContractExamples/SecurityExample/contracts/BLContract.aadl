-- Assurance Contract Annex Plugin for OSATE
-- Copyright 2023 Carnegie Mellon University.
-- NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE 
-- MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO 
-- WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT 
-- NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR 
-- RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE 
-- ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT 
-- INFRINGEMENT.
-- Released under a BSD (SEI)-style license, please see license.txt or contact 
-- permission@sei.cmu.edu for full terms.
-- [DISTRIBUTION STATEMENT A] This material has been approved for public release and 
-- unlimited distribution.  Please see Copyright notice for non-US Government use and 
-- distribution.
-- Carnegie MellonÂ® is registered in the U.S. Patent and Trademark Office by Carnegie 
-- Mellon University.
-- This Software includes and/or makes use of the following Third-Party Software subject 
-- to its own license:
-- 1. Z3 (https://github.com/Z3Prover/z3/blob/master/LICENSE.txt) Copyright Microsoft 
-- Corporation.
-- 2. Eclipse (https://www.eclipse.org/legal/epl-2.0/) Copyright 2000, 2023 Eclipse 
-- contributors and others.
-- DM23-0575

package BLContract
public
    annex contract {**
        contract implementation i {`
			def buildFeatureMap(reverseFeatureMap):
				dict = {}
				for (sys, features) in reverseFeatureMap:
					for f in features:
						dict[f] = sys
				print("Dict")
				print(dict)
				return dict	
			`}
        
		domain Bell_LaPadula {
			queries
				val rootSystemsToCheck = root.subcomponents.map {
					ci -> (ci, ci#VerificationProperties::CheckBellLaPadula)
				}.filterTupleElementsPresent.filter {
					(ci, checkBLP) -> checkBLP
				}.map { (ci, x) -> ci };
				
				val systems = rootSystemsToCheck.flatMap {
					ci -> ci.subcomponents.filter {
						s -> s.isSystem
					}
				};
				val numSubjects = systems.size;
			
				val semanticConnections = rootSystemsToCheck.flatMap {
					ci -> ci.allConnections
				};				
				val numObjects = semanticConnections.size;
				
				val reverseFeatureMap = systems.map {
					s -> (s, s.allFeatures)					
				};
			declarations
				'''
				featureMap = buildFeatureMap(${reverseFeatureMap$})
					
				# Level for each component
				compLevels = { s:Int('Subject' + str(s)) for s in ${systems$} }
				# Level for each feature
				
				# temporary, need to build the subject-object model
				blpOkay = Bool('blpOkay')
        		'''
		}

        contract BLP_SS_Star {
        	domains
        		Bell_LaPadula;
            input assumptions
            	-- Need assumptions about level properties existing
            assumptions
            guarantee
            	<=> `blpOkay`;
            analysis
				java'''org.osate.contract.contracts.bell_lapadula.BellLapadulaContract.checkBellLaPadula(${systems$}, ${semanticConnections$})''';
        }
    **};
end BLContract;
