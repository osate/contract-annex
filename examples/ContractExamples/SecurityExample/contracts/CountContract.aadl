-- Assurance Contract Annex Plugin for OSATE
-- Copyright 2023 Carnegie Mellon University.
-- NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE 
-- MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO 
-- WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT 
-- NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR 
-- RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE 
-- ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT 
-- INFRINGEMENT.
-- Released under a BSD (SEI)-style license, please see license.txt or contact 
-- permission@sei.cmu.edu for full terms.
-- [DISTRIBUTION STATEMENT A] This material has been approved for public release and 
-- unlimited distribution.  Please see Copyright notice for non-US Government use and 
-- distribution.
-- Carnegie MellonÂ® is registered in the U.S. Patent and Trademark Office by Carnegie 
-- Mellon University.
-- This Software includes and/or makes use of the following Third-Party Software subject 
-- to its own license:
-- 1. Z3 (https://github.com/Z3Prover/z3/blob/master/LICENSE.txt) Copyright Microsoft 
-- Corporation.
-- 2. Eclipse (https://www.eclipse.org/legal/epl-2.0/) Copyright 2000, 2023 Eclipse 
-- contributors and others.
-- DM23-0575

package CountContract
public
	with VerificationProperties;
	
    annex contract {**
        contract implementation i {`
			def addError(error,msg):
				error[0]+="|"+msg

			# This functions is a hackish mess of Java objects and Python references
			# reqCounts is a JAVA list of (ComponentInstance, Classifier, Long)
			def checkCounts(reqCounts, justComps, error0):
				allGood = True
				for i in range(reqCounts.size()):
					triple = reqCounts.get(i)
					comp = triple.getElements().get(0)
					requiredClassifier = triple.getElements().get(1)
					requiredCount = triple.getElements().get(2)
					print("*** Component", comp.getName(), "requires", requiredCount, "of", requiredClassifier.getName())
					numFound = countClassifier(comp, requiredClassifier)
					if numFound < requiredCount:
						addError(error0, "{" + str(justComps[i]) + "}Component " + comp.getName() + " requires " + str(requiredCount) + " of " +
							requiredClassifier.getName() + ": Only has " + str(numFound))
						print("  BAD: Only found", numFound)
						allGood = False
					else:
						print("  Satisfied, found", numFound)
				return allGood

			def countClassifier(rootComponent, classifier):
				numFound = 0
				allComponents = rootComponent.getAllComponentInstances()
				for i in range(allComponents.size()):
					current = allComponents.get(i)
					if current != rootComponent:
						k = current.getClassifier()
						if k != None and k.isDescendentOf(classifier):
							numFound += 1
				return numFound
        `}

		domain Counts {
			queries
				val flatReqCounts = root.allComponents.mapPresent {
					ci -> ci#VerificationProperties::RequiredCount.map {
						list -> list.map {
							rec -> (ci, rec.get(clazz), rec.get(bound))
						}.filterTupleElementsPresent
					}
				}.flatten;
				-- Just the components, used for error reporting: passes as object indexes, whereas
				-- flatReqCounts is passes as java objects
				val justComps = flatReqCounts.map {
					(ci, clazz, count) -> ci
				};
				val numFlatReqs = flatReqCounts.size;
			declarations
				'''
				requiredCounts = IntVector('requiredCount', ${numFlatReqs$}) 
				actualCounts = IntVector('actualCount', ${numFlatReqs$}) 
				'''
		}

        contract ComponentCounts {
        	domains
        		Counts;
            input assumptions
				`True`;              
            assumptions
				`True`;              
            guarantee
                <=> '''And([actualCounts[i] >= requiredCounts[i] for i in range(${numFlatReqs$})])''';
            	
            analysis
            	'''checkCounts(${:flatReqCounts$}, ${justComps$}, error0)''';
        }
	**};

end CountContract;
