-- Assurance Contract Annex Plugin for OSATE
-- Copyright 2023 Carnegie Mellon University.
-- NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE 
-- MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO 
-- WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT 
-- NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR 
-- RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE 
-- ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT 
-- INFRINGEMENT.
-- Released under a BSD (SEI)-style license, please see license.txt or contact 
-- permission@sei.cmu.edu for full terms.
-- [DISTRIBUTION STATEMENT A] This material has been approved for public release and 
-- unlimited distribution.  Please see Copyright notice for non-US Government use and 
-- distribution.
-- Carnegie MellonÂ® is registered in the U.S. Patent and Trademark Office by Carnegie 
-- Mellon University.
-- This Software includes and/or makes use of the following Third-Party Software subject 
-- to its own license:
-- 1. Z3 (https://github.com/Z3Prover/z3/blob/master/LICENSE.txt) Copyright Microsoft 
-- Corporation.
-- 2. Eclipse (https://www.eclipse.org/legal/epl-2.0/) Copyright 2000, 2023 Eclipse 
-- contributors and others.
-- DM23-0575

package Aircraft330
public
	with ReplicationProperties;
	
	device LandingGearSensor
		features
			airlandMode:out data port;
	end LandingGearSensor;
	
	device PedalsSensor
		features
			position: out data port;
	end PedalsSensor;
	
	device RudderActuator
		features
			position: out data port;
			positionRate: in data port;
	end RudderActuator;
	
	
	thread ModePedalSampler
		features
			modeRegister: in data port;
			pedalRegister: in data port;
			modeSample: out data port;
			pedalSample: out data port;
		flows
			modeFlowSource: flow source modeSample;
			pedalFlowSource: flow source pedalSample;
	end ModePedalSampler;
	
	thread actuator
		features
			positionSetpoint: in event data port;
			positionRate: out data port;
			position: in data port;
		flows
			positionFlowSink: flow sink positionSetpoint;
	end actuator;
	
	thread validator
		features
			flightMode : in data port;
			ownRudderPosition: in data port;
			backupRudderPosition:in data port;
			outRudderPosition: out data port;
			failed: out data port;
			inFailed: in data port;
		flows
			flightModeFlowPath: flow path flightMode->outRudderPosition;
			rudderFlowPath: flow path ownRudderPosition->outRudderPosition;
			backupFlowPath: flow path backupRudderPosition->outRudderPosition;
			failedFlowPath: flow path backupRudderPosition->failed;
			failedFailedFlowPath: flow path inFailed->failed;
			failedOverFlowPath: flow path inFailed->outRudderPosition;
	end validator;
	
	thread ComputeRudderActuation
		features
			pedalPosition: in data port;
			rudderPosition: out data port;
		flows
			pedalFlowPath: flow path pedalPosition->rudderPosition;
	end ComputeRudderActuation;
	
	process FlightSensingProcess
		features
			flightMode: in data port;
			ownPedalPosition: in data port;
			backupPedalPosition: in data port;
			rudderPosition: out data port;
			failed: out data port;
			inFailed: in data port;
		flows
			modeFlowSource: flow source rudderPosition;
			pedalFlowSource: flow source rudderPosition;
			backupFlowPath: flow path backupPedalPosition->rudderPosition;
			failedFlowPath: flow path backupPedalPosition->failed;
			failedFailedFlowPath : flow path inFailed->failed;
			failedOverFlowPath: flow path inFailed->rudderPosition;
	end FlightSensingProcess;
	
	process implementation FlightSensingProcess.impl
		subcomponents
			samplerThread: thread ModePedalSampler;
			compThread: thread ComputeRudderActuation;
			validatorThread: thread validator;
		connections
			c1: port flightMode->samplerThread.modeRegister;
			c2: port ownPedalPosition->samplerThread.pedalRegister;
			c9: port samplerThread.pedalSample->compThread.pedalPosition;
			c3: port compThread.rudderPosition->validatorThread.ownRudderPosition;
			c4: port samplerThread.modeSample->validatorThread.flightMode;
			c5: port backupPedalPosition->validatorThread.backupRudderPosition;
			c6: port validatorThread.outRudderPosition->rudderPosition;
			c7: port validatorThread.failed->failed;
			c8: port inFailed->validatorThread.inFailed;
		flows
			modeFlowSource: flow source samplerThread.modeFlowSource->c4->validatorThread.flightModeFlowPath->c6->rudderPosition;
			pedalFlowSource: flow source samplerThread.pedalFlowSource->c9->compThread.pedalFlowPath->c3->validatorThread.rudderFlowPath->c6->rudderPosition;
			backupFlowPath: flow path backupPedalPosition->c5->validatorThread.backupFlowPath->c6->rudderPosition;
			failedFlowPath: flow path backupPedalPosition->c5->validatorThread.failedFlowPath->c7->failed;
			failedFailedFlowPath: flow path inFailed->c8->validatorThread.failedFailedFlowPath->c7->failed;
			failedOverFlowPath: flow path inFailed->c8->validatorThread.failedOverFlowPath->c6->rudderPosition;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
			Timing => Delayed applies to c7;
			Timing => Delayed applies to c8;
			Timing => Delayed applies to c9;
	end FlightSensingProcess.impl;
	
	process ValidatorProcess
		features
			ownRudderPosition: in data port;
			backupRudderPosition: in data port;
			outRudderPosition: out data port;
			inFailed: in data port;
			failed : out data port;
			flightMode: in data port;
		flows
			rudderFlowPath : flow path ownRudderPosition->outRudderPosition;
			backRudderFlowPath: flow path backupRudderPosition->outRudderPosition;
			failedFlowPath: flow path backupRudderPosition->failed;
			failedFailedFlowPath: flow path inFailed->failed;
			failedOverFlowPath: flow path inFailed->outRudderPosition;
	end ValidatorProcess;
	
	process implementation ValidatorProcess.impl
		subcomponents 
			validatorThread: thread Validator;
		connections
			c1: port ownRudderPosition->validatorThread.ownRudderPosition;
			c2: port backupRudderPosition->validatorThread.backupRudderPosition;
			c3: port validatorThread.outRudderPosition->outRudderPosition;
			c4: port inFailed->validatorThread.inFailed;
			c5: port validatorThread.failed->failed;
			c6: port flightMode->validatorThread.flightMode;
		flows
			rudderFlowPath: flow path ownRudderPosition->c1->validatorThread.rudderFlowPath->c3->outRudderPosition;
			failedFlowPath: flow path backupRudderPosition->c2->validatorThread.failedFlowPath->c5->failed;
			backRudderFlowPath: flow path backupRudderPosition->c2->validatorThread.backupFlowPath->c3->outRudderPosition;
			failedFailedFlowPath: flow path inFailed->c4->validatorThread.failedFailedFlowPath->c5->failed;
			failedOverFlowPath: flow path inFailed->c4->validatorThread.failedOverFlowPath->c3->outRudderPosition;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
	end ValidatorProcess.impl;
	
	system FlightComputer 
		features
			pedalPosition: in data port;
			rudderPosition: out data port;	
			failed: out data port;
			inFailed: in data port;	
		flows
			modeFlowSource : flow source rudderPosition;
			pedalFlowSource: flow source rudderPosition;
			backupFlowPath: flow path pedalPosition->rudderPosition;
			failedFlowPath: flow path pedalPosition->failed;
			failedFailedFlowPath: flow path inFailed->failed;
			failedOverFlowPath: flow path inFailed->rudderPosition;			
	end FlightComputer;
	
	system implementation FlightComputer.impl
		subcomponents
			landingGear: device LandingGearSensor;
			pedals: device PedalsSensor;
			proc: processor;
			sensingProc: process FlightSensingProcess.impl;
		connections
			c1: port landingGear.airlandMode->sensingProc.flightMode;
			c2: port pedals.position->sensingProc.ownPedalPosition;
			c3: port pedalPosition->sensingProc.backupPedalPosition;
			c4: port sensingProc.rudderPosition->rudderPosition;
			c5: port sensingProc.failed->failed;
			c6: port inFailed->sensingProc.inFailed;
		flows
			modeFlowSource : flow source sensingProc.modeFlowSource->c4->rudderPosition;
			pedalFlowSource: flow source sensingProc.pedalFlowSource->c4->rudderPosition;
			backupFlowPath: flow path pedalPosition->c3->sensingProc.backupFlowPath->c4->rudderPosition;
			failedFlowPath: flow path pedalPosition->c3->sensingProc.failedFlowPath->c5->failed;
			failedFailedFlowPath: flow path inFailed->c6->sensingProc.failedFailedFlowPath->c5->failed;
			failedOverFlowPath: flow path inFailed->c6->sensingProc.failedOverFlowPath->c4->rudderPosition;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
	end FlightComputer.impl;
		
	system ReplicatedPair
		features
			rudderPosition: out data port;
			inFailed: in data port;
			failed: out data port;
		flows
			modeFlowSource1 : flow source rudderPosition;
			modeFlowSource2 : flow source rudderPosition;
			pedalFlowSource1 : flow source rudderPosition;
			pedalFlowSource2 : flow source rudderPosition;
			modeFailedFlowSource : flow source failed;
			pedalFailedFlowSource: flow source failed;
			failedFailedFlowPath : flow path inFailed->failed;
			failedOverFlowPath: flow path inFailed->rudderPosition;
	end ReplicatedPair;
	
	system implementation ReplicatedPair.impl
		subcomponents
			com: system FlightComputer.impl;
			mon: system FlightComputer.impl;
		connections
			c1: port mon.rudderPosition -> com.pedalPosition;
			c2: port com.rudderPosition->rudderPosition;
			c3: port inFailed->com.inFailed;
			c4: port com.failed->failed;
		flows
			modeFlowSource1 : flow source com.modeFlowSource->c2->rudderPosition;
			modeFlowSource2 : flow source mon.modeFlowSource->c1->com.backupFlowPath->c2->rudderPosition;
			pedalFlowSource1: flow source com.pedalFlowSource->c2->rudderPosition;
			pedalFlowSource2: flow source mon.pedalFlowSource->c1->com.backupFlowPath->c2->rudderPosition;
			modeFailedFlowSource: flow source mon.modeFlowSource->c1->com.failedFlowPath->c4->failed;
			pedalFailedFlowSource: flow source mon.pedalFlowSource->c1->com.failedFlowPath->c4->failed;
			failedFailedFlowPath: flow path inFailed->c3->com.failedFailedFlowPath->c4->failed;
			failedOverFlowPath: flow path inFailed->c3->com.failedOverFlowPath->c2->rudderPosition;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
	end ReplicatedPair.impl;
			
	process CommonSensorProcess
		features
			flightModeRegister: in data port;
			pedalsPositionRegister: in data port;
			flightMode: out data port;
			pedalPosition: out data port;
		flows
			pedalFlowSource: flow source pedalPosition;
			modeFlowSource: flow source flightMode;
	end CommonSensorProcess;
	
	process implementation CommonSensorProcess.impl
		subcomponents
			samplerThread: thread ModePedalSampler;
		connections
			c1: port flightModeRegister->samplerThread.modeRegister;
			c2: port pedalsPositionRegister->samplerThread.pedalRegister;
			c3: port samplerThread.modeSample->flightMode;
			c4: port samplerThread.pedalSample->pedalPosition;
		flows
			pedalFlowSource: flow source samplerThread.pedalFlowSource->c4->pedalPosition;
			modeFlowSource: flow source samplerThread.modeFlowSource->c3->flightMode;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
	end CommonSensorProcess.impl;
		
	system CommonSensor
		features
			pedalPosition: out data port;
			flightMode: out data port;
		flows
			pedalFlowSource: flow source pedalPosition;
			modeFlowSource: flow source flightMode;
	end CommonSensor;
	
	system implementation CommonSensor.impl
		subcomponents
			landingGear: device LandingGearSensor;
			pedals: device PedalsSensor;
			proc: processor;
			sensingProc: process CommonSensorProcess.impl;
		connections
			c1: port landingGear.airlandMode->sensingProc.flightModeRegister;
			c2: port pedals.position->sensingProc.pedalsPositionRegister;
			c3: port sensingProc.flightMode->flightMode;
			c4: port sensingProc.pedalPosition->pedalPosition;
		flows
			pedalFlowSource: flow source sensingProc.pedalFlowSource->c4->pedalPosition;
			modeFlowSource: flow source sensingProc.modeFlowSource->c3->flightMode;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
	end CommonSensor.impl;
	
	process SurfaceActuatingProcess
		features
			surfacePositionSetpoint: in data port;
			surfacePosition: in data port;
			surfacePositionRate: out data port;
		flows
			positionFlowSink: flow sink surfacePositionSetpoint;
	end SurfaceActuatingProcess;
	
	process implementation SurfaceActuatingProcess.impl
		subcomponents
			actuatingThread: thread actuator;
		connections
			c1: port surfacePositionSetpoint->actuatingThread.positionSetpoint;
			c2: port surfacePosition->actuatingThread.position;
			c3: port actuatingThread.positionRate->surfacePositionRate;
		flows
			positionFlowSink: flow sink surfacePositionSetpoint->c1->actuatingThread.positionFlowSink;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
	end SurfaceActuatingProcess.impl;
	
	system FlightSurfaceActuator
		features
			rudderPosition: in data port;
		flows
			positionFlowSink: flow sink rudderPosition;
	end FlightSurfaceActuator;
	
	system implementation FlightSurfaceActuator.impl
		subcomponents
			rudderActuator: device RudderActuator;
			actuatingProc: process SurfaceActuatingProcess.impl;
			proc: processor;
		connections
			c1: port rudderPosition->actuatingProc.surfacePositionSetpoint;
			c2: port actuatingProc.surfacePositionRate->rudderActuator.positionRate;
			c3: port rudderActuator.position->actuatingProc.surfacePosition;
		flows
			positionFlowSink: flow sink rudderPosition->c1->actuatingProc.positionFlowSink;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
	end FlightSurfaceActuator.impl;
	
	process ComputeRudderActuationProcess
		features
			pedalPosition: in data port;
			rudderPosition: out data port;
		flows
			pedalFlowPath: flow path pedalPosition->rudderPosition;
	end ComputeRudderActuationProcess;
	
	process implementation ComputeRudderActuationProcess.impl
		subcomponents
			compThread: thread ComputeRudderActuation;
		connections
			c1: port pedalPosition->compThread.pedalPosition;
			c2: port compThread.rudderPosition->rudderPosition;
		flows
			pedalFlowPath: flow path pedalPosition->c1->compThread.pedalFlowPath->c2->rudderPosition;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
	end ComputeRudderActuationProcess.impl;
	
	system ComputeActuationNoSensor
		features 
			pedalPosition: in data port;
			failed: out data port;
			inFailed: in data port;
			rudderPosition: out data port;
			backRudderPosition: in data port;
			flightMode: in data port;	
		flows
			pedalFlowPath: flow path pedalPosition->rudderPosition;
			backPedalFlowPath: flow path backRudderPosition->rudderPosition;
			backPedalFailedFlowPath: flow path backRudderPosition->failed;
			failedOverFlowPath: flow path inFailed->rudderPosition;
			failedFailedFlowPath: flow path inFailed->failed;
	end ComputeActuationNoSensor;
	
	system implementation ComputeActuationNoSensor.impl
		subcomponents
			compProc: process ComputeRudderActuationProcess.impl;
			validatorProc: process ValidatorProcess.impl;
			proc: processor;
		connections
			c1: port pedalPosition->compProc.pedalPosition;
			c2: port compProc.rudderPosition->validatorProc.ownRudderPosition;
			c3: port backRudderPosition->validatorProc.backupRudderPosition;
			c4: port inFailed->validatorProc.inFailed;
			c5: port validatorProc.failed->failed;
			c6: port validatorProc.outRudderPosition->rudderPosition;
		flows
			pedalFlowPath: flow path pedalPosition->c1->compProc.pedalFlowPath->c2->validatorProc.rudderFlowPath->c6->rudderPosition;
			backPedalFlowPath: flow path backRudderPosition->c3->validatorProc.backRudderFlowPath->c6->rudderPosition;
			backPedalFailedFlowPath: flow path backRudderPosition->c3->validatorProc.failedFlowPath->c5->failed;
			failedOverFlowPath: flow path inFailed->c4->validatorProc.failedOverFlowPath->c6->rudderPosition;
			failedFailedFlowPath: flow path inFailed->c4->validatorProc.failedFailedFlowPath->c5->failed;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
	end ComputeActuationNoSensor.impl;

	system CrossCheckingPairNoSensor
		features
			flightModeCom: in data port;
			pedalPositionCom: in data port;
			flightModeMon: in data port;
			pedalPositionMon: in data port;
			failed: out data port;
			inFailed: in data port;
			rudderPosition: out data port;
		flows
			rudderFlowPathCom: flow path pedalPositionCom->rudderPosition;
			failedFlowPath: flow path pedalPositionMon->failed;
			rudderFlowPathMon: flow path pedalPositionMon->rudderPosition;
			failedFailedFlowPath: flow path inFailed->failed;
			failedOverFlowPath: flow path inFailed->rudderPosition;
	end CrossCheckingPairNoSensor;
	
	system implementation CrossCheckingPairNoSensor.impl
		subcomponents
			com: system ComputeActuationNoSensor.impl;
			mon: system ComputeActuationNoSensor.impl;
		connections
			c1: port flightModeCom -> com.flightMode;
			c2: port pedalPositionCom->com.pedalPosition;
			c3: port flightModeMon->mon.flightMode;
			c4: port pedalPositionMon->mon.pedalPosition;
			c5: port mon.rudderPosition->com.backRudderPosition;
			c6: port inFailed->com.inFailed;
			c7: port com.failed->failed;
			c8: port com.rudderPosition->rudderPosition;
		flows
			rudderFlowPathCom: flow path pedalPositionCom->c2->com.pedalFlowPath->c8->rudderPosition;
			rudderFlowPathMon: flow path pedalPositionMon->c4->mon.pedalFlowPath->c5->com.backPedalFlowPath->c8->rudderPosition;
			failedFlowPath: flow path pedalPositionMon->c4->mon.pedalFlowPath->c5->com.backPedalFailedFlowPath->c7->failed;
			failedFailedFlowPath: flow path inFailed->c6->com.failedFailedFlowPath->c7->failed;
			failedOverFlowPath: flow path inFailed->c6->com.failedOverFlowPath->c8->rudderPosition;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
			Timing => Delayed applies to c7;
			Timing => Delayed applies to c8;
	end CrossCheckingPairNoSensor.impl;
	
	system ReplicationPairCommonSensor
		features
			failed: out data port;
			inFailed: in data port;
			rudderPosition: out data port;
		flows
			rudderFlowSourceCom: flow source rudderPosition;
			failedFlowSource: flow source failed;
			rudderFlowSourceMon: flow source rudderPosition;
			failedFailedFlowPath: flow path inFailed->failed;
			failedOverFlowPath: flow path inFailed->rudderPosition;
	end ReplicationPairCommonSensor;

	system implementation ReplicationPairCommonSensor.impl
		subcomponents
			sensor: system CommonSensor.impl;
			com: system ComputeActuationNoSensor.impl;
			mon: system ComputeActuationNoSensor.impl;
		connections
			c1: port sensor.flightMode -> com.flightMode;
			c2: port sensor.pedalPosition->com.pedalPosition;
			c3: port sensor.flightMode->mon.flightMode;
			c4: port sensor.pedalPosition->mon.pedalPosition;
			c5: port mon.rudderPosition->com.backRudderPosition;
			c6: port inFailed->com.inFailed;
			c7: port com.failed->failed;
			c8: port com.rudderPosition->rudderPosition;
		flows
			rudderFlowSourceCom: flow source sensor.pedalFlowSource->c2->com.pedalFlowPath->c8->rudderPosition;
			rudderFlowSourceMon: flow source sensor.pedalFlowSource->c4->mon.pedalFlowPath->c5->com.backPedalFlowPath->c8->rudderPosition;
			failedFlowSource: flow source sensor.pedalFlowSource->c4->mon.pedalFlowPath->c5->com.backPedalFailedFlowPath->c7->failed;
			failedFailedFlowPath: flow path inFailed->c6->com.failedFailedFlowPath->c7->failed;
			failedOverFlowPath: flow path inFailed->c6->com.failedOverFlowPath->c8->rudderPosition;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
			Timing => Delayed applies to c7;
			Timing => Delayed applies to c8;
	end ReplicationPairCommonSensor.impl;
	
	system implementation FlightSystem.externalCommonSensor
		subcomponents
			sensor: system CommonSensor.impl;
			rep1: system CrossCheckingPairNoSensor.impl;
			rep2: system CrossCheckingPairNoSensor.impl;
			rep3: system CrossCheckingPairNoSensor.impl;
			act: system FlightSurfaceActuator.impl;			
		connections
			c1: port sensor.flightMode->rep1.flightModeCom;
			c2: port sensor.flightMode->rep1.flightModeMon;
			c3: port sensor.pedalPosition->rep1.pedalPositionCom;
			c4: port sensor.pedalPosition->rep1.pedalPositionMon;
			c11: port sensor.flightMode->rep2.flightModeCom;
			c12: port sensor.flightMode->rep2.flightModeMon;
			c13: port sensor.pedalPosition->rep2.pedalPositionCom;
			c14: port sensor.pedalPosition->rep2.pedalPositionMon;
			c15: port sensor.flightMode->rep3.flightModeCom;
			c16: port sensor.flightMode->rep3.flightModeMon;
			c17: port sensor.pedalPosition->rep3.pedalPositionCom;
			c18: port sensor.pedalPosition->rep3.pedalPositionMon;
			c5: port rep1.failed->rep2.inFailed;
			c6: port rep2.failed->rep3.inFailed;
			c7: port rep3.failed->failed;
			c8: port rep1.rudderPosition->act.rudderPosition;
			c9: port rep2.rudderPosition->act.rudderPosition;
			c10: port rep3.rudderPosition->act.rudderPosition;
		flows
			pedalToActuationComRep1: end to end flow sensor.pedalFlowSource->c3->rep1.rudderFlowPathCom->c8->act.positionFlowSink;
			pedalToActuationMonRep1: end to end flow sensor.pedalFlowSource->c4->rep1.rudderFlowPathMon->c8->act.positionFlowSink;
			pedalToActuationComRep2: end to end flow sensor.pedalFlowSource->c13->rep2.rudderFlowPathCom->c9->act.positionFlowSink;
			pedalToActuationMonRep2: end to end flow sensor.pedalFlowSource->c14->rep2.rudderFlowPathMon->c9->act.positionFlowSink;
			pedalToActuationComRep3: end to end flow sensor.pedalFlowSource->c17->rep3.rudderFlowPathCom->c10->act.positionFlowSink;
			pedalToActuationMonRep3: end to end flow sensor.pedalFlowSource->c18->rep3.rudderFlowPathMon->c10->act.positionFlowSink;
			
			-- FailedOver flows
			rep1rep2FaileOver: end to end flow sensor.pedalFlowSource->c4->rep1.failedFlowPath->c5->rep2.failedOverFlowPath->c9->act.positionFlowSink;
			rep2rep3FailedOver: end to end flow sensor.pedalFlowSource->c14->rep2.failedFlowPath->c6->rep3.failedOverFlowPath->c10->act.positionFlowSink;
			rep1rep2rep3FailedOver: end to end flow sensor.pedalFlowSource->c4->rep1.failedFlowPath->c5->rep2.failedFailedFlowPath->c6->rep3.failedOverFlowPath->c10->act.positionFlowSink;
			failedFlowSource: flow source sensor.pedalFlowSource->c4->rep1.failedFlowPath->c5->rep2.failedFailedFlowPath->c6->rep3.failedFailedFlowPath->c7->failed;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
			Timing => Delayed applies to c7;
			Timing => Delayed applies to c8;
			Timing => Delayed applies to c9;
			Timing => Delayed applies to c10;
			Timing => Delayed applies to c11;
			Timing => Delayed applies to c12;
			Timing => Delayed applies to c13;
			Timing => Delayed applies to c14;
			Timing => Delayed applies to c15;
			Timing => Delayed applies to c16;
			Timing => Delayed applies to c17;
			Timing => Delayed applies to c18;
			
			Dispatch_Protocol => Periodic applies to sensor.sensingProc.samplerThread;
			Period => 100 ms applies to sensor.sensingProc.samplerThread;
			Priority => 1 applies to sensor.sensingProc.samplerThread;
			Deadline => 100 ms applies to sensor.sensingProc.samplerThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to sensor.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (sensor.proc)) applies to sensor.sensingProc.samplerThread;			

			Dispatch_Protocol => Periodic applies to act.actuatingProc.actuatingThread;
			Period => 100 ms applies to act.actuatingProc.actuatingThread;
			Priority => 1 applies to act.actuatingProc.actuatingThread;
			Deadline => 100 ms applies to act.actuatingProc.actuatingThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to act.actuatingProc.actuatingThread;
			Actual_Processor_Binding => (reference (act.proc)) applies to act.actuatingProc.actuatingThread;			
			
			Dispatch_Protocol => Periodic applies to rep1.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep1.com.compProc.compThread;
			Period => 100 ms applies to rep1.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep1.mon.compProc.compThread;
			Period => 100 ms applies to rep1.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep1.com.compProc.compThread;
			Priority => 1 applies to rep1.com.validatorProc.validatorThread;
			Priority => 1 applies to rep1.mon.compProc.compThread;
			Priority => 1 applies to rep1.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep1.com.compProc.compThread;
			Deadline => 100 ms applies to rep1.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep1.mon.compProc.compThread;
			Deadline => 100 ms applies to rep1.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.validatorProc.validatorThread;
			
			Dispatch_Protocol => Periodic applies to rep2.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep2.com.compProc.compThread;
			Period => 100 ms applies to rep2.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep2.mon.compProc.compThread;
			Period => 100 ms applies to rep2.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep2.com.compProc.compThread;
			Priority => 1 applies to rep2.com.validatorProc.validatorThread;
			Priority => 1 applies to rep2.mon.compProc.compThread;
			Priority => 1 applies to rep2.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep2.com.compProc.compThread;
			Deadline => 100 ms applies to rep2.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep2.mon.compProc.compThread;
			Deadline => 100 ms applies to rep2.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.validatorProc.validatorThread;

			Dispatch_Protocol => Periodic applies to rep3.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep3.com.compProc.compThread;
			Period => 100 ms applies to rep3.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep3.mon.compProc.compThread;
			Period => 100 ms applies to rep3.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep3.com.compProc.compThread;
			Priority => 1 applies to rep3.com.validatorProc.validatorThread;
			Priority => 1 applies to rep3.mon.compProc.compThread;
			Priority => 1 applies to rep3.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep3.com.compProc.compThread;
			Deadline => 100 ms applies to rep3.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep3.mon.compProc.compThread;
			Deadline => 100 ms applies to rep3.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.validatorProc.validatorThread;

			-- ****************
			-- * Normal Flows *
			-- ****************
			Latency =>100 ms..400 ms applies to pedalToActuationComRep1;
			Latency =>100 ms..500 ms applies to pedalToActuationMonRep1;
			Latency =>100 ms..400 ms applies to pedalToActuationComRep2;
			Latency =>100 ms..500 ms applies to pedalToActuationMonRep2;
			Latency =>100 ms..500 ms applies to pedalToActuationComRep3;
			Latency =>100 ms..500 ms applies to pedalToActuationMonRep3;

			-- *******************
			-- * Fail over flows *
			-- *******************
			Latency =>100 ms..600 ms applies to rep1rep2FaileOver; 
			Latency =>100 ms..600 ms applies to rep2rep3FailedOver;
			Latency =>100 ms..700 ms applies to rep1rep2rep3FailedOver;
			Latency =>100 ms..300 ms applies to failedFlowSource;
			
			-- *************************
			-- * Hierarchical subflows *
			-- *************************
			Latency => 10 ms .. 100 ms applies to sensor.sensingProc.samplerThread.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor.sensingProc.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor.sensingProc.samplerThread.modeFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor.sensingProc.modeFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor.modeFlowSource;
			
			Latency => 10 ms .. 100 ms applies to rep1.rudderFlowPathCom;
			Latency => 10 ms .. 100 ms applies to rep1.rudderFlowPathMon;
			Latency => 10 ms .. 100 ms applies to rep1.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.failedOverFlowPath;
							
			Latency => 10 ms .. 100 ms applies to rep2.rudderFlowPathCom;
			Latency => 10 ms .. 100 ms applies to rep2.rudderFlowPathMon;
			Latency => 10 ms .. 100 ms applies to rep2.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep2.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep2.failedOverFlowPath;

			Latency => 10 ms .. 100 ms applies to rep3.rudderFlowPathCom;
			Latency => 10 ms .. 100 ms applies to rep3.rudderFlowPathMon;
			Latency => 10 ms .. 100 ms applies to rep3.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep3.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep3.failedOverFlowPath;
			
			ReplicationProperties::Replicating => (reference (pedalToActuationComRep2),reference (pedalToActuationComRep3)
			) applies to pedalToActuationComRep1;


			ReplicationProperties::ReliabilityTarget =>0.75 applies to pedalToActuationComRep1;
			
			ReplicationProperties::FailureProbability => 0.01 applies to sensor.proc;
			ReplicationProperties::FailureProbability => 0.01 applies to act.proc;
			
			ReplicationProperties::FailureProbability => 0.1 applies to rep1.com.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to rep1.mon.proc;

			ReplicationProperties::FailureProbability => 0.1 applies to rep2.com.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to rep2.mon.proc;

			ReplicationProperties::FailureProbability => 0.1 applies to rep3.com.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to rep3.mon.proc;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationComRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationMonRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationComRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationMonRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationComRep3;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationMonRep3;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep1rep2FaileOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep2rep3FailedOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep1rep2rep3FailedOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to failedFlowSource;
			
			annex contract {** 
				verify FlowSynchronizationContract::verifySynchronizationWithSharedSensors;
			**};
			
	end FlightSystem.externalCommonSensor;


	system implementation FlightSystem.externalIndependentSensor
		subcomponents
			sensor1: system CommonSensor.impl;
			sensor2: system CommonSensor.impl;
			sensor3: system CommonSensor.impl;
			rep1: system CrossCheckingPairNoSensor.impl;
			rep2: system CrossCheckingPairNoSensor.impl;
			rep3: system CrossCheckingPairNoSensor.impl;
			act1: system FlightSurfaceActuator.impl;			
			act2: system FlightSurfaceActuator.impl;			
			act3: system FlightSurfaceActuator.impl;			
		connections
			c1: port sensor1.flightMode->rep1.flightModeCom;
			c2: port sensor1.flightMode->rep1.flightModeMon;
			c3: port sensor1.pedalPosition->rep1.pedalPositionCom;
			c4: port sensor1.pedalPosition->rep1.pedalPositionMon;
			c11: port sensor2.flightMode->rep2.flightModeCom;
			c12: port sensor2.flightMode->rep2.flightModeMon;
			c13: port sensor2.pedalPosition->rep2.pedalPositionCom;
			c14: port sensor2.pedalPosition->rep2.pedalPositionMon;
			c15: port sensor3.flightMode->rep3.flightModeCom;
			c16: port sensor3.flightMode->rep3.flightModeMon;
			c17: port sensor3.pedalPosition->rep3.pedalPositionCom;
			c18: port sensor3.pedalPosition->rep3.pedalPositionMon;
			c5: port rep1.failed->rep2.inFailed;
			c6: port rep2.failed->rep3.inFailed;
			c7: port rep3.failed->failed;
			c8: port rep1.rudderPosition->act1.rudderPosition;
			c9: port rep2.rudderPosition->act2.rudderPosition;
			c10: port rep3.rudderPosition->act3.rudderPosition;
		flows
			pedalToActuationComRep1: end to end flow sensor1.pedalFlowSource->c3->rep1.rudderFlowPathCom->c8->act1.positionFlowSink;
			pedalToActuationMonRep1: end to end flow sensor1.pedalFlowSource->c4->rep1.rudderFlowPathMon->c8->act1.positionFlowSink;
			pedalToActuationComRep2: end to end flow sensor2.pedalFlowSource->c13->rep2.rudderFlowPathCom->c9->act2.positionFlowSink;
			pedalToActuationMonRep2: end to end flow sensor2.pedalFlowSource->c14->rep2.rudderFlowPathMon->c9->act2.positionFlowSink;
			pedalToActuationComRep3: end to end flow sensor3.pedalFlowSource->c17->rep3.rudderFlowPathCom->c10->act3.positionFlowSink;
			pedalToActuationMonRep3: end to end flow sensor3.pedalFlowSource->c18->rep3.rudderFlowPathMon->c10->act3.positionFlowSink;
			
			-- FailedOver flows
			rep1rep2FaileOver: end to end flow sensor1.pedalFlowSource->c4->rep1.failedFlowPath->c5->rep2.failedOverFlowPath->c9->act2.positionFlowSink;
			rep2rep3FailedOver: end to end flow sensor2.pedalFlowSource->c14->rep2.failedFlowPath->c6->rep3.failedOverFlowPath->c10->act3.positionFlowSink;
			rep1rep2rep3FailedOver: end to end flow sensor1.pedalFlowSource->c4->rep1.failedFlowPath->c5->rep2.failedFailedFlowPath->c6->rep3.failedOverFlowPath->c10->act3.positionFlowSink;
			failedFlowSource: flow source sensor1.pedalFlowSource->c4->rep1.failedFlowPath->c5->rep2.failedFailedFlowPath->c6->rep3.failedFailedFlowPath->c7->failed;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
			Timing => Delayed applies to c7;
			Timing => Delayed applies to c8;
			Timing => Delayed applies to c9;
			Timing => Delayed applies to c10;
			Timing => Delayed applies to c11;
			Timing => Delayed applies to c12;
			Timing => Delayed applies to c13;
			Timing => Delayed applies to c14;
			Timing => Delayed applies to c15;
			Timing => Delayed applies to c16;
			Timing => Delayed applies to c17;
			Timing => Delayed applies to c18;
			
			Dispatch_Protocol => Periodic applies to sensor1.sensingProc.samplerThread;
			Period => 100 ms applies to sensor1.sensingProc.samplerThread;
			Priority => 1 applies to sensor1.sensingProc.samplerThread;
			Deadline => 100 ms applies to sensor1.sensingProc.samplerThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to sensor1.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (sensor1.proc)) applies to sensor1.sensingProc.samplerThread;			

			Dispatch_Protocol => Periodic applies to sensor2.sensingProc.samplerThread;
			Period => 100 ms applies to sensor2.sensingProc.samplerThread;
			Priority => 1 applies to sensor2.sensingProc.samplerThread;
			Deadline => 100 ms applies to sensor2.sensingProc.samplerThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to sensor2.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (sensor2.proc)) applies to sensor2.sensingProc.samplerThread;			
			
			Dispatch_Protocol => Periodic applies to sensor3.sensingProc.samplerThread;
			Period => 100 ms applies to sensor3.sensingProc.samplerThread;
			Priority => 1 applies to sensor3.sensingProc.samplerThread;
			Deadline => 100 ms applies to sensor3.sensingProc.samplerThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to sensor3.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (sensor3.proc)) applies to sensor3.sensingProc.samplerThread;			
			
			Dispatch_Protocol => Periodic applies to act1.actuatingProc.actuatingThread;
			Period => 100 ms applies to act1.actuatingProc.actuatingThread;
			Priority => 1 applies to act1.actuatingProc.actuatingThread;
			Deadline => 100 ms applies to act1.actuatingProc.actuatingThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to act1.actuatingProc.actuatingThread;
			Actual_Processor_Binding => (reference (act1.proc)) applies to act1.actuatingProc.actuatingThread;			
			
			Dispatch_Protocol => Periodic applies to act2.actuatingProc.actuatingThread;
			Period => 100 ms applies to act2.actuatingProc.actuatingThread;
			Priority => 1 applies to act2.actuatingProc.actuatingThread;
			Deadline => 100 ms applies to act2.actuatingProc.actuatingThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to act2.actuatingProc.actuatingThread;
			Actual_Processor_Binding => (reference (act2.proc)) applies to act2.actuatingProc.actuatingThread;			

			Dispatch_Protocol => Periodic applies to act3.actuatingProc.actuatingThread;
			Period => 100 ms applies to act3.actuatingProc.actuatingThread;
			Priority => 1 applies to act3.actuatingProc.actuatingThread;
			Deadline => 100 ms applies to act3.actuatingProc.actuatingThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to act3.actuatingProc.actuatingThread;
			Actual_Processor_Binding => (reference (act3.proc)) applies to act3.actuatingProc.actuatingThread;			

			Dispatch_Protocol => Periodic applies to rep1.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep1.com.compProc.compThread;
			Period => 100 ms applies to rep1.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep1.mon.compProc.compThread;
			Period => 100 ms applies to rep1.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep1.com.compProc.compThread;
			Priority => 1 applies to rep1.com.validatorProc.validatorThread;
			Priority => 1 applies to rep1.mon.compProc.compThread;
			Priority => 1 applies to rep1.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep1.com.compProc.compThread;
			Deadline => 100 ms applies to rep1.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep1.mon.compProc.compThread;
			Deadline => 100 ms applies to rep1.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.validatorProc.validatorThread;
			
			Dispatch_Protocol => Periodic applies to rep2.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep2.com.compProc.compThread;
			Period => 100 ms applies to rep2.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep2.mon.compProc.compThread;
			Period => 100 ms applies to rep2.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep2.com.compProc.compThread;
			Priority => 1 applies to rep2.com.validatorProc.validatorThread;
			Priority => 1 applies to rep2.mon.compProc.compThread;
			Priority => 1 applies to rep2.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep2.com.compProc.compThread;
			Deadline => 100 ms applies to rep2.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep2.mon.compProc.compThread;
			Deadline => 100 ms applies to rep2.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.validatorProc.validatorThread;

			Dispatch_Protocol => Periodic applies to rep3.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.validatorProc.validatorThread;

			Period => 50 ms applies to rep3.com.compProc.compThread;
			Period => 100 ms applies to rep3.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep3.mon.compProc.compThread;
			Period => 100 ms applies to rep3.mon.validatorProc.validatorThread;

			Priority => 2 applies to rep3.com.compProc.compThread;
			Priority => 1 applies to rep3.com.validatorProc.validatorThread;
			Priority => 1 applies to rep3.mon.compProc.compThread;
			Priority => 1 applies to rep3.mon.validatorProc.validatorThread;

			Deadline => 50 ms applies to rep3.com.compProc.compThread;
			Deadline => 100 ms applies to rep3.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep3.mon.compProc.compThread;
			Deadline => 100 ms applies to rep3.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.validatorProc.validatorThread;

			-- ****************
			-- * Normal Flows *
			-- ****************
			Latency =>100 ms..400 ms applies to pedalToActuationComRep1;
			Latency =>100 ms..500 ms applies to pedalToActuationMonRep1;
			Latency =>100 ms..400 ms applies to pedalToActuationComRep2;
			Latency =>100 ms..500 ms applies to pedalToActuationMonRep2;
			Latency =>100 ms..400 ms applies to pedalToActuationComRep3;
			Latency =>100 ms..500 ms applies to pedalToActuationMonRep3;

			-- *******************
			-- * Fail over flows *
			-- *******************
			Latency =>100 ms..600 ms applies to rep1rep2FaileOver; 
			Latency =>100 ms..600 ms applies to rep2rep3FailedOver;
			Latency =>100 ms..700 ms applies to rep1rep2rep3FailedOver;
			Latency =>100 ms..300 ms applies to failedFlowSource;
			
			-- *************************
			-- * Hierarchical subflows *
			-- *************************
			Latency => 10 ms .. 100 ms applies to sensor1.sensingProc.samplerThread.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor1.sensingProc.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor1.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor1.sensingProc.samplerThread.modeFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor1.sensingProc.modeFlowSource;
			Latency => 10 ms .. 100 ms applies to sensor1.modeFlowSource;
			
			Latency => 10 ms .. 100 ms applies to rep1.rudderFlowPathCom;
			Latency => 10 ms .. 100 ms applies to rep1.rudderFlowPathMon;
			Latency => 10 ms .. 100 ms applies to rep1.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.failedOverFlowPath;
							
			Latency => 10 ms .. 100 ms applies to rep2.rudderFlowPathCom;
			Latency => 10 ms .. 100 ms applies to rep2.rudderFlowPathMon;
			Latency => 10 ms .. 100 ms applies to rep2.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep2.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep2.failedOverFlowPath;

			Latency => 10 ms .. 100 ms applies to rep3.rudderFlowPathCom;
			Latency => 10 ms .. 100 ms applies to rep3.rudderFlowPathMon;
			Latency => 10 ms .. 100 ms applies to rep3.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep3.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep3.failedOverFlowPath;
			
			ReplicationProperties::Replicating => (reference (pedalToActuationComRep2),reference (pedalToActuationComRep3)
			) applies to pedalToActuationComRep1;

			ReplicationProperties::ValueReplicas => (reference (pedalToActuationComRep1)) applies to pedalToActuationMonRep1;
			ReplicationProperties::ValueReplicas => (reference (pedalToActuationComRep2)) applies to pedalToActuationMonRep2;
			ReplicationProperties::ValueReplicas => (reference (pedalToActuationComRep3)) applies to pedalToActuationMonRep3;

			ReplicationProperties::ReliabilityTarget =>0.75 applies to pedalToActuationComRep1;
			
			ReplicationProperties::FailureProbability => 0.1 applies to sensor1.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to act1.proc;

			ReplicationProperties::FailureProbability => 0.1 applies to sensor2.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to act2.proc;

			ReplicationProperties::FailureProbability => 0.1 applies to sensor3.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to act3.proc;
			
			ReplicationProperties::FailureProbability => 0.1 applies to rep1.com.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to rep1.mon.proc;

			ReplicationProperties::FailureProbability => 0.1 applies to rep2.com.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to rep2.mon.proc;

			ReplicationProperties::FailureProbability => 0.1 applies to rep3.com.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to rep3.mon.proc;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 0 ms applies to pedalToActuationComRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 0 ms applies to pedalToActuationMonRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationComRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationMonRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationComRep3;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationMonRep3;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep1rep2FaileOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep2rep3FailedOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep1rep2rep3FailedOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to failedFlowSource;
			
			annex contract {**
				verify FlowSynchronizationContract::verifySynchronization;
			**};
			
	end FlightSystem.externalIndependentSensor;

	system implementation FlightSystem.externalCommonComCommonMonSesnors
		subcomponents
			sensorCom: system CommonSensor.impl;
			sensorMon: system CommonSensor.impl;
			rep1: system CrossCheckingPairNoSensor.impl;
			rep2: system CrossCheckingPairNoSensor.impl;
			rep3: system CrossCheckingPairNoSensor.impl;
			act1: system FlightSurfaceActuator.impl;			
			act2: system FlightSurfaceActuator.impl;			
			act3: system FlightSurfaceActuator.impl;			
		connections
			c1: port sensorCom.flightMode->rep1.flightModeCom;
			c2: port sensorMon.flightMode->rep1.flightModeMon;
			c3: port sensorCom.pedalPosition->rep1.pedalPositionCom;
			c4: port sensorMon.pedalPosition->rep1.pedalPositionMon;
			c11: port sensorCom.flightMode->rep2.flightModeCom;
			c12: port sensorMon.flightMode->rep2.flightModeMon;
			c13: port sensorCom.pedalPosition->rep2.pedalPositionCom;
			c14: port sensorMon.pedalPosition->rep2.pedalPositionMon;
			c15: port sensorCom.flightMode->rep3.flightModeCom;
			c16: port sensorMon.flightMode->rep3.flightModeMon;
			c17: port sensorCom.pedalPosition->rep3.pedalPositionCom;
			c18: port sensorMon.pedalPosition->rep3.pedalPositionMon;
			c5: port rep1.failed->rep2.inFailed;
			c6: port rep2.failed->rep3.inFailed;
			c7: port rep3.failed->failed;
			c8: port rep1.rudderPosition->act1.rudderPosition;
			c9: port rep2.rudderPosition->act2.rudderPosition;
			c10: port rep3.rudderPosition->act3.rudderPosition;
		flows
			pedalToActuationComRep1: end to end flow sensorCom.pedalFlowSource->c3->rep1.rudderFlowPathCom->c8->act1.positionFlowSink;
			pedalToActuationMonRep1: end to end flow sensorMon.pedalFlowSource->c4->rep1.rudderFlowPathMon->c8->act1.positionFlowSink;
			pedalToActuationComRep2: end to end flow sensorCom.pedalFlowSource->c13->rep2.rudderFlowPathCom->c9->act2.positionFlowSink;
			pedalToActuationMonRep2: end to end flow sensorMon.pedalFlowSource->c14->rep2.rudderFlowPathMon->c9->act2.positionFlowSink;
			pedalToActuationComRep3: end to end flow sensorCom.pedalFlowSource->c17->rep3.rudderFlowPathCom->c10->act3.positionFlowSink;
			pedalToActuationMonRep3: end to end flow sensorMon.pedalFlowSource->c18->rep3.rudderFlowPathMon->c10->act3.positionFlowSink;
			
			-- FailedOver flows
			rep1rep2FaileOver: end to end flow sensorMon.pedalFlowSource->c4->rep1.failedFlowPath->c5->rep2.failedOverFlowPath->c9->act2.positionFlowSink;
			rep2rep3FailedOver: end to end flow sensorMon.pedalFlowSource->c14->rep2.failedFlowPath->c6->rep3.failedOverFlowPath->c10->act3.positionFlowSink;
			rep1rep2rep3FailedOver: end to end flow sensorMon.pedalFlowSource->c4->rep1.failedFlowPath->c5->rep2.failedFailedFlowPath->c6->rep3.failedOverFlowPath->c10->act3.positionFlowSink;
			failedFlowSource: flow source sensorMon.pedalFlowSource->c4->rep1.failedFlowPath->c5->rep2.failedFailedFlowPath->c6->rep3.failedFailedFlowPath->c7->failed;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
			Timing => Delayed applies to c7;
			Timing => Delayed applies to c8;
			Timing => Delayed applies to c9;
			Timing => Delayed applies to c10;
			Timing => Delayed applies to c11;
			Timing => Delayed applies to c12;
			Timing => Delayed applies to c13;
			Timing => Delayed applies to c14;
			Timing => Delayed applies to c15;
			Timing => Delayed applies to c16;
			Timing => Delayed applies to c17;
			Timing => Delayed applies to c18;
			
			Dispatch_Protocol => Periodic applies to sensorMon.sensingProc.samplerThread;
			Period => 50 ms applies to sensorMon.sensingProc.samplerThread;
			Priority => 1 applies to sensorMon.sensingProc.samplerThread;
			Deadline => 50 ms applies to sensorMon.sensingProc.samplerThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to sensorMon.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (sensorMon.proc)) applies to sensorMon.sensingProc.samplerThread;			

			Dispatch_Protocol => Periodic applies to sensorCom.sensingProc.samplerThread;
			Period => 50 ms applies to sensorCom.sensingProc.samplerThread;
			Priority => 1 applies to sensorCom.sensingProc.samplerThread;
			Deadline => 50 ms applies to sensorCom.sensingProc.samplerThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to sensorCom.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (sensorCom.proc)) applies to sensorCom.sensingProc.samplerThread;			
			
			Dispatch_Protocol => Periodic applies to act1.actuatingProc.actuatingThread;
			Period => 100 ms applies to act1.actuatingProc.actuatingThread;
			Priority => 1 applies to act1.actuatingProc.actuatingThread;
			Deadline => 100 ms applies to act1.actuatingProc.actuatingThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to act1.actuatingProc.actuatingThread;
			Actual_Processor_Binding => (reference (act1.proc)) applies to act1.actuatingProc.actuatingThread;			
			
			Dispatch_Protocol => Periodic applies to act2.actuatingProc.actuatingThread;
			Period => 100 ms applies to act2.actuatingProc.actuatingThread;
			Priority => 1 applies to act2.actuatingProc.actuatingThread;
			Deadline => 100 ms applies to act2.actuatingProc.actuatingThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to act2.actuatingProc.actuatingThread;
			Actual_Processor_Binding => (reference (act2.proc)) applies to act2.actuatingProc.actuatingThread;			

			Dispatch_Protocol => Periodic applies to act3.actuatingProc.actuatingThread;
			Period => 100 ms applies to act3.actuatingProc.actuatingThread;
			Priority => 1 applies to act3.actuatingProc.actuatingThread;
			Deadline => 100 ms applies to act3.actuatingProc.actuatingThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to act3.actuatingProc.actuatingThread;
			Actual_Processor_Binding => (reference (act3.proc)) applies to act3.actuatingProc.actuatingThread;			

			Dispatch_Protocol => Periodic applies to rep1.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep1.com.compProc.compThread;
			Period => 100 ms applies to rep1.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep1.mon.compProc.compThread;
			Period => 100 ms applies to rep1.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep1.com.compProc.compThread;
			Priority => 1 applies to rep1.com.validatorProc.validatorThread;
			Priority => 1 applies to rep1.mon.compProc.compThread;
			Priority => 1 applies to rep1.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep1.com.compProc.compThread;
			Deadline => 100 ms applies to rep1.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep1.mon.compProc.compThread;
			Deadline => 100 ms applies to rep1.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.validatorProc.validatorThread;
			
			Dispatch_Protocol => Periodic applies to rep2.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep2.com.compProc.compThread;
			Period => 100 ms applies to rep2.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep2.mon.compProc.compThread;
			Period => 100 ms applies to rep2.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep2.com.compProc.compThread;
			Priority => 1 applies to rep2.com.validatorProc.validatorThread;
			Priority => 1 applies to rep2.mon.compProc.compThread;
			Priority => 1 applies to rep2.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep2.com.compProc.compThread;
			Deadline => 100 ms applies to rep2.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep2.mon.compProc.compThread;
			Deadline => 100 ms applies to rep2.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.validatorProc.validatorThread;

			Dispatch_Protocol => Periodic applies to rep3.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep3.com.compProc.compThread;
			Period => 100 ms applies to rep3.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep3.mon.compProc.compThread;
			Period => 100 ms applies to rep3.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep3.com.compProc.compThread;
			Priority => 1 applies to rep3.com.validatorProc.validatorThread;
			Priority => 1 applies to rep3.mon.compProc.compThread;
			Priority => 1 applies to rep3.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep3.com.compProc.compThread;
			Deadline => 100 ms applies to rep3.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep3.mon.compProc.compThread;
			Deadline => 100 ms applies to rep3.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.validatorProc.validatorThread;

			-- ****************
			-- * Normal Flows *
			-- ****************
			Latency =>100 ms..400 ms applies to pedalToActuationComRep1;
			Latency =>100 ms..500 ms applies to pedalToActuationMonRep1;
			Latency =>100 ms..400 ms applies to pedalToActuationComRep2;
			Latency =>100 ms..500 ms applies to pedalToActuationMonRep2;
			Latency =>100 ms..400 ms applies to pedalToActuationComRep3;
			Latency =>100 ms..500 ms applies to pedalToActuationMonRep3;

			-- *******************
			-- * Fail over flows *
			-- *******************
			Latency =>100 ms..600 ms applies to rep1rep2FaileOver; 
			Latency =>100 ms..600 ms applies to rep2rep3FailedOver;
			Latency =>100 ms..700 ms applies to rep1rep2rep3FailedOver;
			Latency =>100 ms..300 ms applies to failedFlowSource;
			
			-- *************************
			-- * Hierarchical subflows *
			-- *************************
			Latency => 10 ms .. 100 ms applies to sensorCom.sensingProc.samplerThread.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorCom.sensingProc.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorCom.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorCom.sensingProc.samplerThread.modeFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorCom.sensingProc.modeFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorCom.modeFlowSource;

			Latency => 10 ms .. 100 ms applies to sensorMon.sensingProc.samplerThread.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorMon.sensingProc.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorMon.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorMon.sensingProc.samplerThread.modeFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorMon.sensingProc.modeFlowSource;
			Latency => 10 ms .. 100 ms applies to sensorMon.modeFlowSource;
			
			Latency => 10 ms .. 100 ms applies to rep1.rudderFlowPathCom;
			Latency => 10 ms .. 100 ms applies to rep1.rudderFlowPathMon;
			Latency => 10 ms .. 100 ms applies to rep1.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.failedOverFlowPath;
							
			Latency => 10 ms .. 100 ms applies to rep2.rudderFlowPathCom;
			Latency => 10 ms .. 100 ms applies to rep2.rudderFlowPathMon;
			Latency => 10 ms .. 100 ms applies to rep2.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep2.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep2.failedOverFlowPath;

			Latency => 10 ms .. 100 ms applies to rep3.rudderFlowPathCom;
			Latency => 10 ms .. 100 ms applies to rep3.rudderFlowPathMon;
			Latency => 10 ms .. 100 ms applies to rep3.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep3.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep3.failedOverFlowPath;
			
			ReplicationProperties::Replicating => (reference (pedalToActuationComRep2),reference (pedalToActuationComRep3)
			) applies to pedalToActuationComRep1;

			ReplicationProperties::ValueReplicas => (reference (pedalToActuationComRep1)) applies to pedalToActuationMonRep1;
			ReplicationProperties::ValueReplicas => (reference (pedalToActuationComRep2)) applies to pedalToActuationMonRep2;
			ReplicationProperties::ValueReplicas => (reference (pedalToActuationComRep3)) applies to pedalToActuationMonRep3;

			ReplicationProperties::ReliabilityTarget =>0.85 applies to pedalToActuationComRep1;
			
			ReplicationProperties::FailureProbability => 0.01 applies to sensorCom.proc;
			ReplicationProperties::FailureProbability => 0.01 applies to act1.proc;

			ReplicationProperties::FailureProbability => 0.01 applies to sensorMon.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to act2.proc;

			ReplicationProperties::FailureProbability => 0.1 applies to act3.proc;
			
			ReplicationProperties::FailureProbability => 0.1 applies to rep1.com.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to rep1.mon.proc;

			ReplicationProperties::FailureProbability => 0.1 applies to rep2.com.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to rep2.mon.proc;

			ReplicationProperties::FailureProbability => 0.1 applies to rep3.com.proc;
			ReplicationProperties::FailureProbability => 0.1 applies to rep3.mon.proc;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 0 ms applies to pedalToActuationComRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 0 ms applies to pedalToActuationMonRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationComRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationMonRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationComRep3;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationMonRep3;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep1rep2FaileOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep2rep3FailedOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep1rep2rep3FailedOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to failedFlowSource;
			
			annex contract {**
				verify FlowSynchronizationContract::verifySynchronization;
			**};
			
	end FlightSystem.externalCommonComCommonMonSesnors;

	
	system implementation FlightSystem.commonSensor
		subcomponents
			rep1: system ReplicationPairCommonSensor.impl;
			rep2: system ReplicationPairCommonSensor.impl;
			rep3: system ReplicationPairCommonSensor.impl;
			act: system FlightSurfaceActuator.impl;
		connections
			c1: port rep1.failed->rep2.inFailed;
			c2: port rep2.failed->rep3.inFailed;
			c3: port rep3.failed->failed;
			c4: port rep1.rudderPosition->act.rudderPosition;
			c5: port rep2.rudderPosition->act.rudderPosition;
			c6: port rep3.rudderPosition->act.rudderPosition;
		flows
			pedalToActuationComRep1: end to end flow rep1.rudderFlowSourceCom->c4->act.positionFlowSink;
			pedalToActuationMonRep1: end to end flow rep1.rudderFlowSourceMon->c4->act.positionFlowSink;
			pedalToActuationComRep2: end to end flow rep2.rudderFlowSourceCom->c5->act.positionFlowSink;
			pedalToActuationMonRep2: end to end flow rep2.rudderFlowSourceMon->c5->act.positionFlowSink;
			pedalToActuationComRep3: end to end flow rep3.rudderFlowSourceCom->c6->act.positionFlowSink;
			pedalToActuationMonRep3: end to end flow rep3.rudderFlowSourceMon->c6->act.positionFlowSink;
			
			-- FailedOver flows
			rep1rep2FaileOver: end to end flow rep1.failedFlowSource->c1->rep2.failedOverFlowPath->c5->act.positionFlowSink;
			rep2rep3FailedOver: end to end flow rep2.failedFlowSource->c2->rep3.failedOverFlowPath->c6->act.positionFlowSink;
			rep1rep2rep3FailedOver: end to end flow rep1.failedFlowSource->c1->rep2.failedFailedFlowPath->c2->rep3.failedOverFlowPath->c6->act.positionFlowSink;
			failedFlowSource: flow source rep1.failedFlowSource->c1->rep2.failedFailedFlowPath->c2->rep3.failedFailedFlowPath->c3->failed;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;
			
			-- ****************
			-- * Normal Flows *
			-- ****************
			Latency =>100 ms..300 ms applies to pedalToActuationComRep1;
			Latency =>100 ms..300 ms applies to pedalToActuationMonRep1;
			Latency =>100 ms..300 ms applies to pedalToActuationComRep2;
			Latency =>100 ms..300 ms applies to pedalToActuationMonRep2;
			Latency =>100 ms..300 ms applies to pedalToActuationComRep3;
			Latency =>100 ms..300 ms applies to pedalToActuationMonRep3;

			-- *******************
			-- * Fail over flows *
			-- *******************
			Latency =>100 ms..300 ms applies to rep1rep2FaileOver; 
			Latency =>100 ms..300 ms applies to rep2rep3FailedOver;
			Latency =>100 ms..300 ms applies to rep1rep2rep3FailedOver;
			Latency =>100 ms..300 ms applies to failedFlowSource;

			-- *************************
			-- * Hierarchical subflows *
			-- *************************
			Latency => 10 ms .. 100 ms applies to rep1.sensor.sensingProc.samplerThread.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep1.sensor.sensingProc.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep1.sensor.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep1.rudderFlowSourceCom;
			Latency => 10 ms .. 100 ms applies to rep1.rudderFlowSourceMon;
			Latency => 10 ms .. 100 ms applies to rep1.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.failedFlowSource;
			Latency => 10 ms .. 100 ms applies to rep1.failedOverFlowPath;

			Latency => 10 ms .. 100 ms applies to rep2.sensor.sensingProc.samplerThread.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep2.sensor.sensingProc.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep2.sensor.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep2.rudderFlowSourceCom;
			Latency => 10 ms .. 100 ms applies to rep2.rudderFlowSourceMon;
			Latency => 10 ms .. 100 ms applies to rep2.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep2.failedFlowSource;
			Latency => 10 ms .. 100 ms applies to rep2.failedOverFlowPath;
			
			Latency => 10 ms .. 100 ms applies to rep3.sensor.sensingProc.samplerThread.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep3.sensor.sensingProc.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep3.sensor.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep3.rudderFlowSourceCom;
			Latency => 10 ms .. 100 ms applies to rep3.rudderFlowSourceMon;
			Latency => 10 ms .. 100 ms applies to rep3.failedFailedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep3.failedFlowSource;
			Latency => 10 ms .. 100 ms applies to rep3.failedOverFlowPath;			
						
			ReplicationProperties::Replicating => (reference (pedalToActuationMonRep1)) applies to pedalToActuationComRep1;
			ReplicationProperties::Replicating => (reference (pedalToActuationComRep1)) applies to pedalToActuationMonRep1;
			ReplicationProperties::Replicating => (reference (pedalToActuationMonRep2)) applies to pedalToActuationComRep2;
			ReplicationProperties::Replicating => (reference (pedalToActuationComRep2)) applies to pedalToActuationMonRep2;
			ReplicationProperties::Replicating => (reference (pedalToActuationMonRep3)) applies to pedalToActuationComRep3;
			ReplicationProperties::Replicating => (reference (pedalToActuationComRep3)) applies to pedalToActuationMonRep3;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 90 ms applies to pedalToActuationComRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 90 ms applies to pedalToActuationMonRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationComRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationMonRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationComRep3;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationMonRep3;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep1rep2FaileOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep2rep3FailedOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to rep1rep2rep3FailedOver;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to failedFlowSource;
			
			Dispatch_Protocol => Periodic applies to rep1.sensor.sensingProc.samplerThread;
			Dispatch_Protocol => Periodic applies to rep1.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep1.sensor.sensingProc.samplerThread;
			Period => 100 ms applies to rep1.com.compProc.compThread;
			Period => 100 ms applies to rep1.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep1.mon.compProc.compThread;
			Period => 100 ms applies to rep1.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep1.sensor.sensingProc.samplerThread;
			Priority => 1 applies to rep1.com.compProc.compThread;
			Priority => 1 applies to rep1.com.validatorProc.validatorThread;
			Priority => 1 applies to rep1.mon.compProc.compThread;
			Priority => 1 applies to rep1.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep1.sensor.sensingProc.samplerThread;
			Deadline => 100 ms applies to rep1.com.compProc.compThread;
			Deadline => 100 ms applies to rep1.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep1.mon.compProc.compThread;
			Deadline => 100 ms applies to rep1.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.sensor.sensingProc.samplerThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep1.mon.validatorProc.validatorThread;
																	
			Actual_Processor_Binding => (reference (rep1.sensor.proc)) applies to rep1.sensor.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.validatorProc.validatorThread;
			
			ReplicationProperties::ReplicaThreadName => "rep1.sensor:Sensor" applies to rep1.sensor.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadName => "rep1.com.Computation" applies to rep1.com.compProc.compThread;
			ReplicationProperties::ReplicaThreadName => "rep1.mon.Computation" applies to rep1.mon.compProc.compThread;
			ReplicationProperties::ReplicaThreadName => "rep1.com.Validator" applies to rep1.com.validatorProc.validatorThread;
			ReplicationProperties::ReplicaThreadName => "rep1.mon.Validator" applies to rep1.mon.validatorProc.validatorThread;			

			Dispatch_Protocol => Periodic applies to rep2.sensor.sensingProc.samplerThread;
			Dispatch_Protocol => Periodic applies to rep2.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep2.sensor.sensingProc.samplerThread;
			Priority => 1 applies to rep2.com.compProc.compThread;
			Priority => 1 applies to rep2.com.validatorProc.validatorThread;
			Priority => 1 applies to rep2.mon.compProc.compThread;
			Priority => 1 applies to rep2.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep2.sensor.sensingProc.samplerThread;
			Period => 100 ms applies to rep2.com.compProc.compThread;
			Period => 100 ms applies to rep2.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep2.mon.compProc.compThread;
			Period => 100 ms applies to rep2.mon.validatorProc.validatorThread;
			
			Deadline => 100 ms applies to rep2.sensor.sensingProc.samplerThread;
			Deadline => 100 ms applies to rep2.com.compProc.compThread;
			Deadline => 100 ms applies to rep2.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep2.mon.compProc.compThread;
			Deadline => 100 ms applies to rep2.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.sensor.sensingProc.samplerThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep2.mon.validatorProc.validatorThread;
																	
			
			Actual_Processor_Binding => (reference (rep2.sensor.proc)) applies to rep2.sensor.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.validatorProc.validatorThread;

			ReplicationProperties::ReplicaThreadName => "rep2.sensor:Sensor" applies to rep2.sensor.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadName => "rep2.com.Computation" applies to rep2.com.compProc.compThread;
			ReplicationProperties::ReplicaThreadName => "rep2.mon.Computation" applies to rep2.mon.compProc.compThread;
			ReplicationProperties::ReplicaThreadName => "rep2.com.Validator" applies to rep2.com.validatorProc.validatorThread;
			ReplicationProperties::ReplicaThreadName => "rep2.mon.Validator" applies to rep2.mon.validatorProc.validatorThread;

			Dispatch_Protocol => Periodic applies to rep3.sensor.sensingProc.samplerThread;
			Dispatch_Protocol => Periodic applies to rep3.com.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.com.validatorProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.compProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.validatorProc.validatorThread;

			Priority => 1 applies to rep3.sensor.sensingProc.samplerThread;
			Priority => 1 applies to rep3.com.compProc.compThread;
			Priority => 1 applies to rep3.com.validatorProc.validatorThread;
			Priority => 1 applies to rep3.mon.compProc.compThread;
			Priority => 1 applies to rep3.mon.validatorProc.validatorThread;

			Period => 100 ms applies to rep3.sensor.sensingProc.samplerThread;
			Period => 100 ms applies to rep3.com.compProc.compThread;
			Period => 100 ms applies to rep3.com.validatorProc.validatorThread;
			Period => 100 ms applies to rep3.mon.compProc.compThread;
			Period => 100 ms applies to rep3.mon.validatorProc.validatorThread;

			Deadline => 100 ms applies to rep3.sensor.sensingProc.samplerThread;
			Deadline => 100 ms applies to rep3.com.compProc.compThread;
			Deadline => 100 ms applies to rep3.com.validatorProc.validatorThread;
			Deadline => 100 ms applies to rep3.mon.compProc.compThread;
			Deadline => 100 ms applies to rep3.mon.validatorProc.validatorThread;

			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.sensor.sensingProc.samplerThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.com.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.com.validatorProc.validatorThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.mon.compProc.compThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to rep3.mon.validatorProc.validatorThread;
																				
			Actual_Processor_Binding => (reference (rep3.sensor.proc)) applies to rep3.sensor.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.compProc.compThread;
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.validatorProc.validatorThread;
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.compProc.compThread;
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.validatorProc.validatorThread;

			ReplicationProperties::ReplicaThreadName => "rep3.sensor:Sensor" applies to rep3.sensor.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadName => "rep3.com.Computation" applies to rep3.com.compProc.compThread;
			ReplicationProperties::ReplicaThreadName => "rep3.mon.Computation" applies to rep3.mon.compProc.compThread;
			ReplicationProperties::ReplicaThreadName => "rep3.com.Validator" applies to rep3.com.validatorProc.validatorThread;
			ReplicationProperties::ReplicaThreadName => "rep3.mon.Validator" applies to rep3.mon.validatorProc.validatorThread;


			Dispatch_Protocol => Periodic applies to  act.actuatingProc.actuatingThread;
			Period => 100 ms applies to act.actuatingProc.actuatingThread;
			Deadline => 100 ms applies to act.actuatingProc.actuatingThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to act.actuatingProc.actuatingThread;
			Priority => 1 applies to act.actuatingProc.actuatingThread;
						
			Actual_Processor_Binding => (reference (act.proc)) applies to act.actuatingProc.actuatingThread;
			
			ReplicationProperties::ReplicaThreadName => "act.actuatingProc.actuatingThread" applies to act.actuatingProc.actuatingThread;			
			
			annex contract {**
				verify FlowSynchronizationContract::verifySynchronization;
			**};
			
	end FlightSystem.commonSensor;
	
	system FlightSystem
		features
			failed: out data port;
		flows
			failedFlowSource: flow source failed;
	end FlightSystem;	
		
	system implementation FlightSystem.impl
		subcomponents
			rep1: system ReplicatedPair.impl;
			rep2: system ReplicatedPair.impl;
			rep3: system ReplicatedPair.impl;
			act: system FlightSurfaceActuator.impl;
		connections
			c1: port rep1.failed->rep2.inFailed;
			c2: port rep2.failed->rep3.inFailed;
			c3: port rep3.failed->failed;
			c4: port rep1.rudderPosition->act.rudderPosition;
			c5: port rep2.rudderPosition->act.rudderPosition;
			c6: port rep3.rudderPosition->act.rudderPosition;
		flows
			modeToActuationRep1: end to end flow rep1.modeFlowSource1->c4->act.positionFlowSink;
			modeToActuationRep1back : end to end flow rep1.modeFlowSource2->c4->act.positionFlowSink;
			pedalToActuationRep1: end to end flow rep1.pedalFlowSource1->c4->act.positionFlowSink;
			pedalToActuationRep1Back: end to end flow rep1.pedalFlowSource2->c4->act.positionFlowSink;
			
			modeToActuationRep2: end to end flow rep2.modeFlowSource1->c5->act.positionFlowSink;
			modeToActuationRep2back : end to end flow rep2.modeFlowSource2->c5->act.positionFlowSink;
			pedalToActuationRep2: end to end flow rep2.pedalFlowSource1->c5->act.positionFlowSink;
			pedalToActuationRep2Back: end to end flow rep2.pedalFlowSource2->c5->act.positionFlowSink;
			
			modeToActuationRep3: end to end flow rep3.modeFlowSource1->c6->act.positionFlowSink;
			modeToActuationRep3back : end to end flow rep3.modeFlowSource2->c6->act.positionFlowSink;
			pedalToActuationRep3: end to end flow rep3.pedalFlowSource1->c6->act.positionFlowSink;
			pedalToActuationRep3Back: end to end flow rep3.pedalFlowSource2->c6->act.positionFlowSink;
			
			rep12rep2FailOver: end to end flow rep1.pedalFailedFlowSource->c1->rep2.failedOverFlowPath->c5->act.positionFlowSink;
			rep22rep3FailOver: end to end flow rep2.pedalFailedFlowSource->c2->rep3.failedOverFlowPath->c6->act.positionFlowSink;
			rep12rep22rep3FailedOver: end to end flow rep1.pedalFailedFlowSource->c1->rep2.failedFailedFlowPath->c2->rep3.failedOverFlowPath->c6->act.positionFlowSink;
			failedFlowSource: flow source rep1.pedalFailedFlowSource->c1->rep2.failedFailedFlowPath->c2->rep3.failedFailedFlowPath->c3->failed;
		properties
			Timing => Delayed applies to c1;
			Timing => Delayed applies to c2;
			Timing => Delayed applies to c3;
			Timing => Delayed applies to c4;
			Timing => Delayed applies to c5;
			Timing => Delayed applies to c6;

			Dispatch_Protocol => Periodic applies to rep1.com.sensingProc.samplerThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.sensingProc.samplerThread;
			Dispatch_Protocol => Periodic applies to rep2.com.sensingProc.samplerThread;			
			Dispatch_Protocol => Periodic applies to rep2.mon.sensingProc.samplerThread;
			Dispatch_Protocol => Periodic applies to rep3.com.sensingProc.samplerThread;			
			Dispatch_Protocol => Periodic applies to rep3.mon.sensingProc.samplerThread;
			
			Dispatch_Protocol => Periodic applies to rep1.mon.sensingProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.com.sensingProc.compThread;
			Dispatch_Protocol => Periodic applies to rep1.mon.sensingProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep1.com.sensingProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.sensingProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.com.sensingProc.compThread;
			Dispatch_Protocol => Periodic applies to rep2.mon.sensingProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep2.com.sensingProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.sensingProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.com.sensingProc.compThread;
			Dispatch_Protocol => Periodic applies to rep3.mon.sensingProc.validatorThread;
			Dispatch_Protocol => Periodic applies to rep3.com.sensingProc.validatorThread;

			Priority => 1 applies to rep1.com.sensingProc.samplerThread;
			Priority => 1 applies to rep1.mon.sensingProc.samplerThread;
			Priority => 1 applies to rep2.com.sensingProc.samplerThread;			
			Priority => 1 applies to rep2.mon.sensingProc.samplerThread;
			Priority => 1 applies to rep3.com.sensingProc.samplerThread;			
			Priority => 1 applies to rep3.mon.sensingProc.samplerThread;
			
			Priority => 1 applies to rep1.mon.sensingProc.compThread;
			Priority => 1 applies to rep1.com.sensingProc.compThread;
			Priority => 1 applies to rep1.mon.sensingProc.validatorThread;
			Priority => 1 applies to rep1.com.sensingProc.validatorThread;
			Priority => 1 applies to rep2.mon.sensingProc.compThread;
			Priority => 1 applies to rep2.com.sensingProc.compThread;
			Priority => 1 applies to rep2.mon.sensingProc.validatorThread;
			Priority => 1 applies to rep2.com.sensingProc.validatorThread;
			Priority => 1 applies to rep3.mon.sensingProc.compThread;
			Priority => 1 applies to rep3.com.sensingProc.compThread;
			Priority => 1 applies to rep3.mon.sensingProc.validatorThread;
			Priority => 1 applies to rep3.com.sensingProc.validatorThread;
						
			Period => 100 ms applies to rep1.com.sensingProc.samplerThread;
			Period => 100 ms applies to rep1.mon.sensingProc.samplerThread;
			Period => 100 ms applies to rep2.com.sensingProc.samplerThread;			
			Period => 100 ms applies to rep2.mon.sensingProc.samplerThread;
			Period => 100 ms applies to rep3.com.sensingProc.samplerThread;			
			Period => 100 ms applies to rep3.mon.sensingProc.samplerThread;
			
			Period => 100 ms applies to rep1.mon.sensingProc.compThread;
			Period => 100 ms applies to rep1.com.sensingProc.compThread;
			Period => 100 ms applies to rep1.mon.sensingProc.validatorThread;
			Period => 100 ms applies to rep1.com.sensingProc.validatorThread;
			Period => 100 ms applies to rep2.mon.sensingProc.compThread;
			Period => 100 ms applies to rep2.com.sensingProc.compThread;
			Period => 100 ms applies to rep2.mon.sensingProc.validatorThread;
			Period => 100 ms applies to rep2.com.sensingProc.validatorThread;
			Period => 100 ms applies to rep3.mon.sensingProc.compThread;
			Period => 100 ms applies to rep3.com.sensingProc.compThread;
			Period => 100 ms applies to rep3.mon.sensingProc.validatorThread;
			Period => 100 ms applies to rep3.com.sensingProc.validatorThread;
						
			Deadline => 100 ms applies to rep1.com.sensingProc.samplerThread;
			Deadline => 100 ms applies to rep1.mon.sensingProc.samplerThread;
			Deadline => 100 ms applies to rep2.com.sensingProc.samplerThread;			
			Deadline => 100 ms applies to rep2.mon.sensingProc.samplerThread;
			Deadline => 100 ms applies to rep3.com.sensingProc.samplerThread;			
			Deadline => 100 ms applies to rep3.mon.sensingProc.samplerThread;
			
			Deadline => 100 ms applies to rep1.mon.sensingProc.compThread;
			Deadline => 100 ms applies to rep1.com.sensingProc.compThread;
			Deadline => 100 ms applies to rep1.mon.sensingProc.validatorThread;
			Deadline => 100 ms applies to rep1.com.sensingProc.validatorThread;
			Deadline => 100 ms applies to rep2.mon.sensingProc.compThread;
			Deadline => 100 ms applies to rep2.com.sensingProc.compThread;
			Deadline => 100 ms applies to rep2.mon.sensingProc.validatorThread;
			Deadline => 100 ms applies to rep2.com.sensingProc.validatorThread;
			Deadline => 100 ms applies to rep3.mon.sensingProc.compThread;
			Deadline => 100 ms applies to rep3.com.sensingProc.compThread;
			Deadline => 100 ms applies to rep3.mon.sensingProc.validatorThread;
			Deadline => 100 ms applies to rep3.com.sensingProc.validatorThread;
			
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep1.com.sensingProc.samplerThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep1.mon.sensingProc.samplerThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep2.com.sensingProc.samplerThread;			
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep2.mon.sensingProc.samplerThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep3.com.sensingProc.samplerThread;			
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep3.mon.sensingProc.samplerThread;	

			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep1.mon.sensingProc.compThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep1.com.sensingProc.compThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep1.mon.sensingProc.validatorThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep1.com.sensingProc.validatorThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep2.mon.sensingProc.compThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep2.com.sensingProc.compThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep2.mon.sensingProc.validatorThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep2.com.sensingProc.validatorThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep3.mon.sensingProc.compThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep3.com.sensingProc.compThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep3.mon.sensingProc.validatorThread;
			Compute_Execution_Time  => 10 ms .. 10 ms applies to rep3.com.sensingProc.validatorThread;
			
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.sensingProc.samplerThread;
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.sensingProc.validatorThread;	
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.sensingProc.samplerThread;	
			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.sensingProc.validatorThread;

			Actual_Processor_Binding => (reference (rep1.mon.proc)) applies to rep1.mon.sensingProc.compThread;
			Actual_Processor_Binding => (reference (rep1.com.proc)) applies to rep1.com.sensingProc.compThread;
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.sensingProc.compThread;
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.sensingProc.compThread;
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.sensingProc.compThread;
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.sensingProc.compThread;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to modeToActuationRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to modeToActuationRep1Back;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationRep1;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationRep1Back;
			
			Latency =>100 ms..300 ms applies to modeToActuationRep1;
			Latency => 100 ms..300 ms applies to modeToActuationRep1Back;
			Latency => 100 ms .. 300 ms applies to pedalToActuationRep1;
			Latency => 100 ms .. 300 ms applies to pedalToActuationRep1Back;

			Latency => 10 ms .. 100 ms applies to rep1.com.sensingProc.samplerThread.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep1.com.sensingProc.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep1.com.pedalFlowSource;
			Latency => 10 ms .. 100 ms applies to rep1.com.sensingProc.validatorThread.rudderFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.com.sensingProc.validatorThread.backupFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.com.sensingProc.validatorThread.failedFlowPath;
			Latency => 10 ms .. 100 ms applies to rep1.com.sensingProc.backupFlowPath;			
			
			ReplicationProperties::Replicating => (reference (pedalToActuationRep1)) applies to pedalToActuationRep1Back;
			ReplicationProperties::Replicating => (reference (pedalToActuationRep1Back)) applies to pedalToActuationRep1;
			ReplicationProperties::Replicating => (reference (modeToActuationRep1)) applies to modeToActuationRep1Back;
			ReplicationProperties::Replicating => (reference (modeToActuationRep1Back)) applies to modeToActuationRep1;
						
			ReplicationProperties::ReplicaProcessorID => 1 applies to rep1.com.proc;
			ReplicationProperties::ReplicaProcessorID => 2 applies to rep1.mon.proc;
			
			ReplicationProperties::ReplicaThreadID => 1 applies to rep1.com.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadID => 2 applies to rep1.mon.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadID => 1 applies to rep1.com.sensingProc.validatorThread;
			ReplicationProperties::ReplicaThreadID => 2 applies to rep1.mon.sensingProc.validatorThread;
			
			ReplicationProperties::ReplicaThreadName => "PFC1:PrimarySensor" applies to rep1.com.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadName => "PFC1:BackupSensor" applies to rep1.mon.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadName => "PFC1:PrimaryValidator" applies to rep1.com.sensingProc.validatorThread;			
			ReplicationProperties::ReplicaThreadName => "PFC1:BackupValidator" applies to rep1.mon.sensingProc.validatorThread;		

			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.sensingProc.samplerThread;	
			Actual_Processor_Binding => (reference (rep2.com.proc)) applies to rep2.com.sensingProc.validatorThread;	
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.sensingProc.samplerThread;	
			Actual_Processor_Binding => (reference (rep2.mon.proc)) applies to rep2.mon.sensingProc.validatorThread;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to modeToActuationRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to modeToActuationRep2Back;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationRep2;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationRep2Back;

			Latency =>100 ms..300 ms applies to modeToActuationRep2;
			Latency => 100 ms..300 ms applies to modeToActuationRep2Back;
			Latency => 100 ms .. 300 ms applies to pedalToActuationRep2;
			Latency => 100 ms .. 300 ms applies to pedalToActuationRep2Back;			

			ReplicationProperties::Replicating => (reference (pedalToActuationRep2)) applies to pedalToActuationRep2Back;
			ReplicationProperties::Replicating => (reference (pedalToActuationRep2Back)) applies to pedalToActuationRep2;
			ReplicationProperties::Replicating => (reference (modeToActuationRep2)) applies to modeToActuationRep2Back;
			ReplicationProperties::Replicating => (reference (modeToActuationRep2Back)) applies to modeToActuationRep2;


			ReplicationProperties::ReplicaProcessorID => 1 applies to rep2.com.proc;
			ReplicationProperties::ReplicaProcessorID => 2 applies to rep2.mon.proc;

			
			ReplicationProperties::ReplicaThreadID => 1 applies to rep2.com.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadID => 2 applies to rep2.mon.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadID => 1 applies to rep2.com.sensingProc.validatorThread;
			ReplicationProperties::ReplicaThreadID => 2 applies to rep2.mon.sensingProc.validatorThread;

			ReplicationProperties::ReplicaThreadName => "PFC2:PrimarySensor" applies to rep2.com.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadName => "PFC2:BackupSensor" applies to rep2.mon.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadName => "PFC2:PrimaryValidator" applies to rep2.com.sensingProc.validatorThread;			
			ReplicationProperties::ReplicaThreadName => "PFC2:BackupValidator" applies to rep2.mon.sensingProc.validatorThread;			

			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.sensingProc.samplerThread;	
			Actual_Processor_Binding => (reference (rep3.com.proc)) applies to rep3.com.sensingProc.validatorThread;	
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.sensingProc.samplerThread;	
			Actual_Processor_Binding => (reference (rep3.mon.proc)) applies to rep3.mon.sensingProc.validatorThread;
			
			ReplicationProperties::Replicating => (reference (pedalToActuationRep3)) applies to pedalToActuationRep3Back;
			ReplicationProperties::Replicating => (reference (pedalToActuationRep3Back)) applies to pedalToActuationRep3;
			ReplicationProperties::Replicating => (reference (modeToActuationRep3)) applies to modeToActuationRep3Back;
			ReplicationProperties::Replicating => (reference (modeToActuationRep3Back)) applies to modeToActuationRep3;
			
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to modeToActuationRep3;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to modeToActuationRep3Back;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationRep3;
			ReplicationProperties::ReplicaStartJitterTolerance => 100 ms applies to pedalToActuationRep3Back;
			
			Latency =>100 ms..300 ms applies to modeToActuationRep3;
			Latency => 100 ms..300 ms applies to modeToActuationRep3Back;
			Latency => 100 ms .. 300 ms applies to pedalToActuationRep3;
			Latency => 100 ms .. 300 ms applies to pedalToActuationRep3Back;
			
			ReplicationProperties::ReplicaProcessorID => 1 applies to rep3.com.proc;
			ReplicationProperties::ReplicaProcessorID => 2 applies to rep3.mon.proc;
						
			ReplicationProperties::ReplicaThreadID => 1 applies to rep3.com.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadID => 2 applies to rep3.mon.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadID => 1 applies to rep3.com.sensingProc.validatorThread;
			ReplicationProperties::ReplicaThreadID => 2 applies to rep3.mon.sensingProc.validatorThread;	
			
			ReplicationProperties::ReplicaThreadName => "PFC3:PrimarySensor" applies to rep3.com.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadName => "PFC3:BackupSensor" applies to rep3.mon.sensingProc.samplerThread;
			ReplicationProperties::ReplicaThreadName => "PFC3:PrimaryValidator" applies to rep3.com.sensingProc.validatorThread;			
			ReplicationProperties::ReplicaThreadName => "PFC3:BackupValidator" applies to rep3.mon.sensingProc.validatorThread;
								
			Actual_Processor_Binding => (reference (act.proc)) applies to act.actuatingProc.actuatingThread;
			Period => 100 ms applies to act.actuatingProc.actuatingThread;
			Deadline => 100 ms applies to act.actuatingProc.actuatingThread;
			Compute_Execution_Time => 10 ms .. 10 ms applies to act.actuatingProc.actuatingThread;	
			Dispatch_Protocol => Periodic  applies to act.actuatingProc.actuatingThread;
			Priority => 1 applies to act.actuatingProc.actuatingThread;
			
			annex contract {**
				verify FlowSynchronizationContract::verifySynchronization;
			**};
			
	end FlightSystem.impl;
	
end Aircraft330;
