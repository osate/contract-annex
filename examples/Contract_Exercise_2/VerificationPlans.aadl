--Copyright 2024 Carnegie Mellon University.
--
--This material is based upon work funded and supported by the Department
--of Defense under Contract No. FA8702-15-D-0002 with Carnegie Mellon
--University for the operation of the Software Engineering Institute, a
--federally funded research and development center.
--
--The view, opinions, and/or findings contained in this material are those
--of the author(s) and should not be construed as an official Government
--position, policy, or decision, unless designated by other documentation.
--
--NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING
--INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON
--UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
--AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR
--PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF
--THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF
--ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT
--INFRINGEMENT.
--
--[DISTRIBUTION STATEMENT A] This material has been approved for public
--release and unlimited distribution.  Please see Copyright notice for
--non-US Government use and distribution.
--
--This material is distributed by the Software Engineering Institute (SEI)
--only to course attendees for their own individual study.
--
--Except for any U.S. government purposes described herein, this material
--SHALL NOT be reproduced or used in any other manner without requesting
--formal permission from the Software Engineering Institute at
--permission@sei.cmu.edu.
--
--Although the rights granted by contract do not require course attendance
--to use this material for U.S. Government purposes, the SEI recommends
--attendance to ensure proper understanding.
--
--DM24-0911

package VerificationPlans
public
	annex contract {**
		verification plan Scenario1AVP {
			component
				s: Scenario1A::FlightSystem.oneSensor;
			domains
				Scenario1AContracts::synchronization;
			claims
				`And([E2EResponses[i] <= E2ELatencies[i] for i in range(len(E2EResponses))])`;
			contracts
				Scenario1AContracts::EndToEndDelayedCommunicationContract;
		} 

		verification plan Scenario1BVP {
			component
				s: Scenario1B::FlightSystem.oneSensor;
			domains
				FlowSynchronizationContract::synchronization;
			claims
				`And([E2EResponses[i] <= E2ELatencies[i] for i in range(len(E2EResponses))])`;
			contracts
				FlowSynchronizationContract::EndToEndDelayedCommunicationContract;
		} 

		verification plan Scenario2AVP {
			component
				s: Scenario2A::FlightSystem.oneSensor;
			domains
				Scenario1AContracts::synchronization;
			claims
				`And([E2EResponses[i] <= E2ELatencies[i] for i in range(len(E2EResponses))])`;
			contracts
				Scenario2AContracts::EndToEndDelayedCommunicationContract;
		} 

		verification plan Scenario2BVP {
			component
				s: Scenario2B::FlightSystem.oneSensor;
			domains
				Scenario1AContracts::synchronization;
			claims
				`And([E2EResponses[i] <= E2ELatencies[i] for i in range(len(E2EResponses))])`;
			contracts
				FlowSynchronizationContract::EndToEndDelayedCommunicationContract;
		} 

		verification plan Scenario3AVP_Harmonic {
			component
				s: Scenario2A::FlightSystem.oneSensor;
			domains
				Scenario1AContracts::synchronization;
			claims
				`And([E2EResponses[i] <= E2ELatencies[i] for i in range(len(E2EResponses))])`;
			contracts
				Scenario3AContracts::EndToEndDelayedCommunicationContractHarmonic;
		} 

		verification plan Scenario3AVP_NonHarmonic {
			component
				s: Scenario2A::FlightSystem.oneSensor;
			domains
				Scenario1AContracts::synchronization;
			claims
				`And([E2EResponses[i] <= E2ELatencies[i] for i in range(len(E2EResponses))])`;
			contracts
				Scenario3AContracts::EndToEndDelayedCommunicationContractNonHarmonic;
		} 

		verification plan Scenario3BVP {
			component
				s: Scenario3B::FlightSystem.oneSensor;
			domains
				Scenario1AContracts::synchronization;
			claims
				`And([E2EResponses[i] <= E2ELatencies[i] for i in range(len(E2EResponses))])`;
			contracts
				FlowSynchronizationContract::EndToEndDelayedCommunicationContract;
		} 

--		verification plan verifySynchronizationSeparate {
--			component
--				s: Airbus330::FlightSystem.twoSensors;
--			domains
--				FlowSynchronizationContract::synchronization;
--			claims
--				`And([E2ESamplingJitter[i] <= E2ESamplingJitterTolerance[i] for i in range(len(E2ESamplingJitter))])`;
--				`And([E2EResponses[i] <= E2ELatencies[i] for i in range(len(E2EResponses))])`;
--			contracts
--				FlowSynchronizationContract::SamplingSynchronizationContract;
--				FlowSynchronizationContract::EndToEndDelayedCommunicationContract;
--		} 
	**};
end VerificationPlans;
