-- Assurance Contract Annex Plugin for OSATE
-- Copyright 2023 Carnegie Mellon University.
-- NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE 
-- MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO 
-- WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT 
-- NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR 
-- RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE 
-- ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT 
-- INFRINGEMENT.
-- Released under a BSD (SEI)-style license, please see license.txt or contact 
-- permission@sei.cmu.edu for full terms.
-- [DISTRIBUTION STATEMENT A] This material has been approved for public release and 
-- unlimited distribution.  Please see Copyright notice for non-US Government use and 
-- distribution.
-- Carnegie MellonÂ® is registered in the U.S. Patent and Trademark Office by Carnegie 
-- Mellon University.
-- This Software includes and/or makes use of the following Third-Party Software subject 
-- to its own license:
-- 1. Z3 (https://github.com/Z3Prover/z3/blob/master/LICENSE.txt) Copyright Microsoft 
-- Corporation.
-- 2. Eclipse (https://www.eclipse.org/legal/epl-2.0/) Copyright 2000, 2023 Eclipse 
-- contributors and others.
-- DM23-0575

package wrong_count
public
	annex contract {**
		contract WrongCount {
			queries
				val validList = self.subcomponents
					.map { subcomponent -> (subcomponent, subcomponent) }
					.map { (valid1, valid2) -> valid1 };
				val tooFewList = self.subcomponents
					.map { subcomponent -> (subcomponent, subcomponent, subcomponent) }
					.map { (tooFew1, tooFew2) -> tooFew1 };
				val tooManyList = self.subcomponents
					.map { subcomponent -> (subcomponent, subcomponent) }
					.filter { (tooMany1, tooMany2, tooMany3) -> tooMany1.isThread };
				
				val validOptional = self.parent
					.map { parent -> (parent, parent) }
					.map { (valid1, valid2) -> valid1 };
				val tooFewOptional = self.parent
					.map { parent -> (parent, parent, parent) }
					.map { (tooFew1, tooFew2) -> tooFew1 };
				val tooManyOptional = self.parent
					.map { parent -> (parent, parent) }
					.map { (tooMany1, tooMany2, tooMany3) -> tooMany1 };
		}
	**};
end wrong_count;