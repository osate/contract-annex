-- Assurance Contract Annex Plugin for OSATE
-- Copyright 2023 Carnegie Mellon University.
-- NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE 
-- MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO 
-- WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT 
-- NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR 
-- RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE 
-- ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT 
-- INFRINGEMENT.
-- Released under a BSD (SEI)-style license, please see license.txt or contact 
-- permission@sei.cmu.edu for full terms.
-- [DISTRIBUTION STATEMENT A] This material has been approved for public release and 
-- unlimited distribution.  Please see Copyright notice for non-US Government use and 
-- distribution.
-- Carnegie MellonÂ® is registered in the U.S. Patent and Trademark Office by Carnegie 
-- Mellon University.
-- This Software includes and/or makes use of the following Third-Party Software subject 
-- to its own license:
-- 1. Z3 (https://github.com/Z3Prover/z3/blob/master/LICENSE.txt) Copyright Microsoft 
-- Corporation.
-- 2. Eclipse (https://www.eclipse.org/legal/epl-2.0/) Copyright 2000, 2023 Eclipse 
-- contributors and others.
-- DM23-0575

package system_instance_test
public
	annex contract {**
		contract SystemInstanceTest {
			queries
				val v1 = root.name;
				val v2 = root.category;
				val v3 = root.subcomponents;
				val v4 = root.allSubcomponents;
				val v5 = root.features;
				val v6 = root.allFeatures;
				val v7 = root.localModes;
				val v8 = root.allModes;
				val v9 = root.modeTransitions;
				val v10 = root.allModeTransitions;
				val v11 = root.flowSpecifications;
				val v12 = root.allFlowSpecifications;
				val v13 = root.endToEndFlows;
				val v14 = root.allEndToEndFlows;
				val v15 = root.connections;
				val v16 = root.allConnections;
				val v17 = root.systemOperationModes;
				val v18 = root.isAbstract;
				val v19 = root.isBus;
				val v20 = root.isData;
				val v21 = root.isDevice;
				val v22 = root.isMemory;
				val v23 = root.isProcess;
				val v24 = root.isProcessor;
				val v25 = root.isSubprogram;
				val v26 = root.isSubprogramGroup;
				val v27 = root.isSystem;
				val v28 = root.isThread;
				val v29 = root.isThreadGroup;
				val v30 = root.isVirtualBus;
				val v31 = root.isVirtualProcessor;
		}
	**};
end system_instance_test;