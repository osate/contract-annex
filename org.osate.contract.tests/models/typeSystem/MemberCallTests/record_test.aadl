-- Assurance Contract Annex Plugin for OSATE
-- Copyright 2023 Carnegie Mellon University.
-- NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE 
-- MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO 
-- WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT 
-- NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR 
-- RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE 
-- ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT 
-- INFRINGEMENT.
-- Released under a BSD (SEI)-style license, please see license.txt or contact 
-- permission@sei.cmu.edu for full terms.
-- [DISTRIBUTION STATEMENT A] This material has been approved for public release and 
-- unlimited distribution.  Please see Copyright notice for non-US Government use and 
-- distribution.
-- Carnegie MellonÂ® is registered in the U.S. Patent and Trademark Office by Carnegie 
-- Mellon University.
-- This Software includes and/or makes use of the following Third-Party Software subject 
-- to its own license:
-- 1. Z3 (https://github.com/Z3Prover/z3/blob/master/LICENSE.txt) Copyright Microsoft 
-- Corporation.
-- 2. Eclipse (https://www.eclipse.org/legal/epl-2.0/) Copyright 2000, 2023 Eclipse 
-- contributors and others.
-- DM23-0575

package record_test
public
	annex contract {**
		contract RecordTest {
			queries
				val v1 = self#ps::record_property.map { property -> property.get(boolean) };
				val v2 = self#ps::record_property.map { property -> property.get(string) };
				val v3 = self#ps::record_property.map { property -> property.get(classifier_field) };
				val v4 = self#ps::record_property.map { property -> property.get(enum) };
				val v5 = self#ps::record_property.map { property -> property.get(integer) };
				val v6 = self#ps::record_property.map { property -> property.get(integer_with_units) };
				val v7 = self#ps::record_property.map { property -> property.get(real) };
				val v8 = self#ps::record_property.map { property -> property.get(real_with_units) };
				val v9 = self#ps::record_property.map { property -> property.get(integer_range) };
				val v10 = self#ps::record_property.map { property -> property.get(integer_range_with_units) };
				val v11 = self#ps::record_property.map { property -> property.get(real_range) };
				val v12 = self#ps::record_property.map { property -> property.get(real_range_with_units) };
				val v13 = self#ps::record_property.map { property -> property.get(nested_record) };
				val v14 = self#ps::record_property.map { property -> property.get(reference_field) };
				val v15 = self#ps::record_property.map { property -> property.get(list_field) };
		}
	**};
end record_test;