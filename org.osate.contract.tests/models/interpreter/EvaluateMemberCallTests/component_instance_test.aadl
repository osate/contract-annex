-- Assurance Contract Annex Plugin for OSATE
-- Copyright 2023 Carnegie Mellon University.
-- NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE 
-- MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO 
-- WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT 
-- NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR 
-- RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE 
-- ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT 
-- INFRINGEMENT.
-- Released under a BSD (SEI)-style license, please see license.txt or contact 
-- permission@sei.cmu.edu for full terms.
-- [DISTRIBUTION STATEMENT A] This material has been approved for public release and 
-- unlimited distribution.  Please see Copyright notice for non-US Government use and 
-- distribution.
-- Carnegie MellonÂ® is registered in the U.S. Patent and Trademark Office by Carnegie 
-- Mellon University.
-- This Software includes and/or makes use of the following Third-Party Software subject 
-- to its own license:
-- 1. Z3 (https://github.com/Z3Prover/z3/blob/master/LICENSE.txt) Copyright Microsoft 
-- Corporation.
-- 2. Eclipse (https://www.eclipse.org/legal/epl-2.0/) Copyright 2000, 2023 Eclipse 
-- contributors and others.
-- DM23-0575

package component_instance_test
public
	annex contract {**
		contract componentInstanceTest {
			queries
				val v1 = self;
				val v2 = self.name;
				val v3 = self.category;
				val v4 = self.subcomponents;
				val v5 = self.allSubcomponents;
				val v6 = self.allComponents;
				val v7 = self.features;
				val v8 = self.allFeatures;
				val v9 = self.localModes;
				val v10 = self.allModes;
				val v11 = self.modeTransitions;
				val v12 = self.allModeTransitions;
				val v13 = self.flowSpecifications;
				val v14 = self.allFlowSpecifications;
				val v15 = self.endToEndFlows;
				val v16 = self.allEndToEndFlows;
				val v17 = self.connections;
				val v18 = self.allConnections;
				val v19 = self.inModes;
				val v20 = self.parent;
				val v21 = self.isAbstract;
				val v22 = self.isBus;
				val v23 = self.isData;
				val v24 = self.isDevice;
				val v25 = self.isMemory;
				val v26 = self.isProcess;
				val v27 = self.isProcessor;
				val v28 = self.isSubprogram;
				val v29 = self.isSubprogramGroup;
				val v30 = self.isSystem;
				val v31 = self.isThread;
				val v32 = self.isThreadGroup;
				val v33 = self.isVirtualBus;
				val v34 = self.isVirtualProcessor;
				val v35 = self.states;
				val v36 = self.events;
		}
	**};
	
	system s
		features
			ep1: in event port;
		flows
			outer_flow_spec: flow sink ep1;
		modes
			outer_m1: initial mode;
			outer_m2: mode;
			outer_transition1: outer_m1 -[ep1]-> outer_m2;
		annex EMV2 {**
			use behavior component_instance_test::machine1;
			
			component error behavior
				events
					event1: error event;
					event2: error event;
			end component;
		**};
	end s;
	
	system implementation s.i
		subcomponents
			left_process: process left_process.i;
			right_process: process right_process.i;
			nested_sub: system s2.i;
		connections
			across: port left_process.left_process_port -> right_process.right_process_port;
		flows
			etef1: end to end flow left_process.left_source -> across -> right_process.right_sink;
	end s.i;
	
	system s2
	end s2;
	
	system implementation s2.i
		subcomponents
			left_process: process left_process.i;
			right_process: process right_process.i;
		connections
			across: port left_process.left_process_port -> right_process.right_process_port;
		flows
			etef2: end to end flow left_process.left_source -> across -> right_process.right_sink;
	end s2.i;
	
	process left_process
		features
			left_process_port: out data port d;
		flows
			left_source: flow source left_process_port;
	end left_process;
	
	process implementation left_process.i
		subcomponents
			left_thread: thread left_thread;
		connections
			up: port left_thread.left_thread_port -> left_process_port;
		flows
			left_source: flow source left_thread.left_thread_source -> up -> left_process_port;
	end left_process.i;
	
	thread left_thread
		features
			left_thread_port: out data port d;
			ep2: in event port;
		flows
			left_thread_source: flow source left_thread_port;
		modes
			inner_m1: initial mode;
			inner_m2: mode;
			inner_transition1: inner_m1 -[ep2]-> inner_m2;
	end left_thread;
	
	process right_process
		features
			right_process_port: in data port d;
		flows
			right_sink: flow sink right_process_port;
	end right_process;
	
	process implementation right_process.i
		subcomponents
			right_thread: thread right_thread;
		connections
			down: port right_process_port -> right_thread.right_thread_port;
		flows
			right_sink: flow sink right_process_port -> down -> right_thread.right_thread_sink;
	end right_process.i;
	
	thread right_thread
		features
			right_thread_port: in data port d;
		flows
			right_thread_sink: flow sink right_thread_port;
	end right_thread;
	
	data d
	end d;
	
	annex EMV2 {**
		error behavior machine1
			states
				state1: initial state;
				state2: state;
		end behavior;
	**};
end component_instance_test;